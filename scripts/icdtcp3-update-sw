#!/bin/sh

print_usage()
{
>&2 cat <<EOF

Usage: ${program_name} [-v|-version] [-h|--help] [-f|--force] FILE

The tool updates the next volume (the one which is not in use currently)
with the software image provided with FILE parameter and switches
the boot volume to next.

  -f|--force         skip version check
  -h|--help          show this information
  -v|--version       show version information

EOF
}

print_version()
{
>&2 cat <<EOF

${program_name} ${version}
Copyright (c) 2011-2012 Tomasz Rozensztrauch

EOF
}

info() 
{
  echo "${program_name}: $1" >&2
}

error() 
{
  echo "${program_name}: Error! $1" >&2
  if [ "$2" != "noexit" ]; then
    exit 1;
  fi
}

get_ubi_dev()
{
  local vol_id vol_name
  vol_name="$1"
  vol_id="`ubinfo /dev/ubi0 -N ${vol_name} | sed -n -e \
    's/^Volume ID:[[:space:]]*\([[:digit:]]*\).*$/\1/p'`"
  test "x${vol_id}" == "x" && return 1
  echo "/dev/ubi0_${vol_id}"
  return 0
}

#
# update_ubi_vol()
#  $1 ubi_boot_vol
#  $2 update_file
#  $3 header
#  $4 image_name
#
update_ubi_vol()
{
  local ubi_boot_vol update_file header image_name
  local ubi_dev image_file image_version image_size
  local image_compression decompressor

  ubi_boot_vol=$1
  update_file=$2
  header=$3
  image_name=$4

  # First, get the device (e.g /dev/ubi0_1) asociated with
  # the volume ${image_name} suffixed with ${ubi_boot_vol} ("a" or "b")
  info "Updating ${image_name}-${ubi_boot_vol}"
  ubi_dev=`get_ubi_dev "${image_name}-${ubi_boot_vol}"`
  if [ $? -ne 0 ]; then
    error "Obtaining device for volume ${image_name}-${ubi_boot_vol} failed" noexit
    return 1
  fi

  # Get image to update with and its metadata
  image_file=`echo "${header}" | \
    sed -n -e 's/^'"${image_name}"'=\(.*\)$/\1/p'`

  image_version=`echo "${header}" | \
    sed -n -e 's/^'"${image_name}"'-version=\(.*\)$/\1/p'`

  image_size=`echo "${header}" | \
    sed -n -e 's/^'"${image_name}"'-size=\(.*\)$/\1/p'`

  image_compression=`echo "${header}" | \
    sed -n -e 's/^'"${image_name}"'-compression=\(.*\)$/\1/p'`
  info "image: ${image_file} (version: ${image_version}, size: ${image_size}, compression: ${image_compression})"

  # Figure out what decompression tool to use
  case "${image_compression}" in
    none) decompressor="cut -" ;;
    gzip) decompressor="gunzip" ;;
    bzip2) decompressor="bunzip2" ;;
    lzma) decompressor="unlzma" ;;
    *) error "Invalid compression: '${image_compression}'" noexit; return 1 ;;
  esac

  # Extract image, uncompress and update the volume with it
  tar -x ${image_file} -f ${update_file} -O | ${decompressor} | \
    ubiupdatevol "${ubi_dev}" -s "${image_size}" -
  if [ $? -ne 0 ]; then
    error "Updating ${ubi_dev} failed" noexit
    return 1
  fi

  return 0
}

# check_version()
#  $1 version
#  $2 update_version
check_version()
{
  local version version_full update_version update_version_full
  local major minor patch
  version="$1"
  update_version="$2"

  major=`echo "${version}" | cut -d. -f 1`
  minor=`echo "${version}" | cut -d. -f 2`
  patch=`echo "${version}" | cut -d. -f 3`
  version_full=`printf "%02d%02d%02d" "${major}" "${minor}" "${patch}"`

  major=`echo "${update_version}" | cut -d. -f 1`
  minor=`echo "${update_version}" | cut -d. -f 2`
  patch=`echo "${update_version}" | cut -d. -f 3`
  update_version_full=`printf "%02d%02d%02d" "${major}" "${minor}" "${patch}"`

  test "${update_version_full}" -gt "${version_full}" && return 0 || return 1
}

program_name=`basename "$0"`
version=`cat "/etc/br-version"`

# By default run version check
force="no"

options=`getopt -o l:fhv --long volume:,force,help,version -- "$@"`
eval set -- "$options"
while true ; do
  case "$1" in
    -f|--force) force="yes"; shift 1 ;;
    -h|--help) print_usage; exit 0 ;;
    -v|--version) print_version; exit 0 ;;
    --) shift; break ;;
    *) error "Parsing parameters failed at '$1'" ;;
  esac
done

test "x$1" != "x" || error "Parsing parameters failed. Missing parameter URL"
update_file="$1"
shift 1

test "x$1" = "x" || error "Parsing parameters failed at '$1'"

bootcfg_dev=`get_ubi_dev "bootcfg"`
test $? -eq 0 || error "Obtaining device for volume bootcfg failed"

bootcfg_aux_dev=`get_ubi_dev "bootcfg-aux"`
test $? -eq 0 || error "Obtaining device for volume bootcfg-aux failed"

curr_boot_vol=`cat "${bootcfg_dev}" | cut -d = -f 2`
test "x${curr_boot_vol}" != "x" || error "Obtaining current ubi boot volume failed"

ubi_boot_vol=`test "${curr_boot_vol}" == "a" && echo "b" || echo "a"`

info "Current boot volume: ${version}"
info "Current version: ${version}"
info "Volume for update: ${ubi_boot_vol}"

header=`tar -x header -f ${update_file} -O`
test $? -eq 0 || error "Extracting update header failed"

update_version=`echo "${header}" | sed -n -e 's/^version=\(.*\)$/\1/p'`
info "Version from ${update_file}: ${update_version}"

if [ "${force}" != "yes" ]; then
  check_version "${version}" "${update_version}"
  test $? -eq 0 || error "Version validation failed"
fi

update_ubi_vol "${ubi_boot_vol}" "${update_file}" "${header}" "uImage"
test $? -eq 0 || error "Updating uImage-${ubi_boot_vol} volume failed"

update_ubi_vol "${ubi_boot_vol}" "${update_file}" "${header}" "rootfs"
test $? -eq 0 || error "Updating rootfs-${ubi_boot_vol} volume failed"

info "Setting ubi boot volume to: ${ubi_boot_vol}"
printf "ubi-boot-vol=${ubi_boot_vol}\n\0" | ubiupdatevol ${bootcfg_aux_dev} -s 16 -
test $? -eq 0 || error "Updating ${bootcfg_aux_dev} failed"
ubirename /dev/ubi0 bootcfg bootcfg-aux bootcfg-aux bootcfg
test $? -eq 0 || error "Swaping bootcfg and bootcfg-aux volumes failed."

exit 0
