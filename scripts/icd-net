#!/bin/sh

eth_get_params()
{
  local tmp
  eth_changed="no"

  tmp=`icd-config --db="${ICD_CONFIG_DB}" sget tcpip dhcp`
  if [ "$eth_dhcp" != "$tmp" ]; then
    eth_dhcp="$tmp"
    eth_changed="yes"
  fi

  if [ "$eth_dhcp" = "no" ]; then
    tmp=`icd-config --db="${ICD_CONFIG_DB}" sget tcpip ip`
    if [ "$eth_ip" != "$tmp" ]; then
      eth_ip="$tmp"
      eth_changed="yes"
    fi

    tmp=`icd-config --db="${ICD_CONFIG_DB}" sget tcpip mask`
    if [ "$eth_mask" != "$tmp" ]; then
      eth_mask="$tmp"
      eth_changed="yes"
    fi

    tmp=`icd-config --db="${ICD_CONFIG_DB}" sget tcpip gate`
    if [ "$eth_gate" != "$tmp" ]; then
      eth_gate="$tmp"
      eth_changed="yes"
    fi

    tmp=`icd-config --db="${ICD_CONFIG_DB}" sget tcpip dns1`
    if [ "$eth_dns1" != "$tmp" ]; then
      eth_dns1="$tmp"
      eth_changed="yes"
    fi

    tmp=`icd-config --db="${ICD_CONFIG_DB}" sget tcpip dns2`
    if [ "$eth_dns2" != "$tmp" ]; then
      eth_dns2="$tmp"
      eth_changed="yes"
    fi

    tmp=`icd-config --db="${ICD_CONFIG_DB}" sget tcpip dnsmasq`
    if [ "$eth_dnsmasq" != "$tmp" ]; then
      eth_dnsmasq="$tmp"
      eth_changed="yes"
    fi
  fi # end if $eth_dhcp

  tmp=`icd-config --db="${ICD_CONFIG_DB}" sget tcpip mac`
  if [ "$eth_mac" != "$tmp" ]; then
    eth_mac="$tmp"
    eth_changed="yes"
  fi
}
eth_yes() 
{
  if [ "$eth_running" != "yes" ]; then
    ifconfig eth0 hw ether $eth_mac
    echo `date` ":: Eth set MAC"
    ifconfig eth0 up
    if [ "$eth_dhcp" = "no" ]; then
      ifconfig eth0 $eth_ip netmask $eth_mask
      echo `date` ":: Eth set IP=$eth_ip mask=$eth_mask"

      if [ -e /tmp/route_eth0 ]; then
        rm /tmp/route_eth0
      fi
      if [ "$eth_gate" != "" ]; then
        echo $eth_gate > /tmp/route_eth0
      fi

      if [ -e /tmp/resolv_eth0 ]; then
        rm /tmp/resolv_eth0
      fi
      if [ "$eth_dns1" != "" ]; then
        echo "nameserver $eth_dns1" >> /tmp/resolv_eth0
      fi
      if [ "$eth_dns2" != "" ]; then
        echo "nameserver $eth_dns2" >> /tmp/resolv_eth0
      fi

      if [ "$eth_dnsmasq" = "yes" ]; then #dnsmasq only for static eth0
        dnsmasq_yes
      fi
    fi
    icd-net-route-resolv
    eth_running="yes"
  fi

  if [ "$eth_dhcp" = "yes" ]; then # start dhcp
    if [ "`ps | grep -q "[u]dhcpc -i eth0" && echo yes || echo no`" = "no" ] 
    then # check if udhcpc crashed
      udhcpc -i eth0 -R -s "${ICD_SHARE_DIR}/udhcpc.script" 2>&1 | icd-logrotate /tmp/log/net_eth_udhcpc.log &
      echo `date` ":: Eth start udhcpc"
    fi
  fi
}
eth_no()
{
  if [ "$eth_running" = "yes" ]; then
    kill `ps | awk ''/'[u]dhcpc -i eth0'/' { print $1}'`
    ifconfig eth0 0.0.0.0 down
    echo `date` ":: Eth down"
    dnsmasq_no
    eth_running="no"
  fi
}
dnsmasq_yes()
{
  local eth_net eth_ipend eth_ipbeg

  eth_net=`echo ${eth_ip}"."${eth_mask} | awk -F '.' '{ print and($1 ,$5) "." and($2 ,$6) "." and($3 ,$7) "." and($4, $8 ) }'`
  eth_ipend=`echo ${eth_ip} | awk -F '.' '{ print $4 }'` #calculate network address
  eth_ipbeg=`echo ${eth_ip} | awk -F '.' '{ print $1 "." $2 "." $3 }'`

  echo 1 > /proc/sys/net/ipv4/ip_forward #transfer backets by kernel
  echo "Dnsmasq transfer packets ON"
  iptables -t nat -A POSTROUTING -s $eth_net/$eth_mask -d 0.0.0.0/0 -j MASQUERADE # trnsfet fom ip to ip
  echo "Dnsmasq iptables: POSTROUTING -s $eth_net/$eth_mask -d 0.0.0.0/0 -j MASQUERADE"

  echo "interface=eth0" > /tmp/dnsmasq.conf #dnsmasq config
  echo "cache-size=0" >> /tmp/dnsmasq.conf
  echo "dhcp-leasefile=/tmp/log/net_dnsmasq_leases.log" >> /tmp/dnsmasq.conf
  if [ "$eth_ipend" -ge 100 ]
  then
    echo "dhcp-range=${eth_ipbeg}.20,${eth_ipbeg}.99,${eth_mask},1h" >> /tmp/dnsmasq.conf
    echo echo "Dnsmasq DHCP range: ${eth_ipbeg}.20 - ${eth_ipbeg}.99"
  else
    echo "dhcp-range=${eth_ipbeg}.120,${eth_ipbeg}.199,${eth_mask},1h" >> /tmp/dnsmasq.conf
    echo echo "Dnsmasq DHCP range: ${eth_ipbeg}.120 - ${eth_ipbeg}.199"
  fi

  dnsmasq -C /tmp/dnsmasq.conf #start dhcp & dns server
  echo echo "Dnsmasq start."

}
dnsmasq_no()
{
  if [ "`ps | grep -q "[d]nsmasq" && echo yes || echo no`" = "yes" ]; then
    killall dnsmasq
  fi
  if [ -e /tmp/log/net_dnsmasq_leases.log ]; then
    rm /tmp/log/net_dnsmasq_leases.log
  fi
  if [ -e /tmp/dnsmasq.conf ]; then
    rm /tmp/dnsmasq.conf
  fi
  iptables -t nat -F POSTROUTING
  echo 0 > /proc/sys/net/ipv4/ip_forward
}

wifi_get_params()
{
  local tmp
  wifi_changed="no"
  tmp=`icd-config --db=$ICD_CONFIG_DB sget wifi enabled`
  if [ "$wifi_enabled" != "$tmp" ]; then
    wifi_enabled="$tmp"
    wifi_changed="yes"
  fi
}

wifi_yes()
{
  if [ "$wifi_cnt" = "" ]; then
    wifi_cnt=0
  fi
  if ! [ -e /tmp/wpa_suppl.conf ]; then
    icd-wifi-cfg-from
    echo `date` ":: Wifi config from db"
  fi

  if [ "`pidof wpa_supplicant > /dev/null && echo yes || echo no`" = "no" ]; then
    wpa_supplicant -Dwext -iwlan0 -c/tmp/wpa_suppl.conf 2>&1 | icd-logrotate /tmp/log/net_wifi_wpa_suppl.log &
    sleep 3
    echo `date` ":: Wifi start wpa_supplicant"
  fi

  if [ "`ps | grep -q "[u]dhcpc -i wlan0" && echo yes || echo no`" = "no" ]; then
    if [ "`pidof wpa_supplicant > /dev/null && echo yes || echo no`" = "yes" ]; then
      udhcpc -i wlan0 -R -s "${ICD_SHARE_DIR}/udhcpc.script" 2>&1 | icd-logrotate /tmp/log/net_wifi_udhcpc.log &
      echo `date` ":: Wifi start udhcpc"
    fi
  fi

  if [ "`wpa_cli -i wlan0 status 2>/dev/null | grep -v bssid | awk -F '=' ''/'ssid'/' {print $2}' | wc -c`" -lt 2 ] || [ "`wpa_cli -i wlan0 status 2>/dev/null | awk -F '=' ''/'ip_address'/' {print $2}' | wc -c`" -lt 2 ]; then #30*30s = 15min without connection, try reset everything
    let wifi_cnt++
    if [ "$wifi_cnt" -gt 30 ]; then
      echo `date` ":: Wifi reset"
      wifi_cnt=0
      wifi_no
    fi
  else
    wifi_cnt=0
  fi

  if [ -e /tmp/wpa_suppl.conf ]; then
    icd-wifi-cfg-to
  fi
}
wifi_no()
{
  if [ "`ps | grep -q "[u]dhcpc -i wlan0" && echo yes || echo no`" = "yes" ]
  then
    kill `ps | awk ''/'[u]dhcpc -i wlan0'/' { print $1}'`
    echo `date` ":: Wifi stop udhcpc"
  fi

  if [ "`pidof wpa_supplicant > /dev/null && echo yes || echo no`" = "yes" ]
  then
    killall wpa_supplicant
    sleep 3
    icd-wifi-cfg-to
    echo `date` ":: Wifi stop wpa_supplicant"
  fi

  if [ -e /tmp/wpa_suppl.conf ]
  then
    rm -f /tmp/wpa_suppl.conf
    echo `date` ":: Wifi remove cfg file"
  fi
}

gsm_set_time()
{
  local utime
  utime=`date +%s`

  let "gsm_time_start=$utime/($gsm_conn*60)"
  let "++gsm_time_start"
  let "gsm_time_start=$gsm_time_start*$gsm_conn*60"
  let "gsm_time_start=$gsm_time_start-360"
  let "gsm_time_stop=$gsm_time_start+3440"
  echo Expected GSM start `echo $gsm_time_start | awk '{print strftime("%c",$1)}'`
  echo Expected GSM stop `echo $gsm_time_stop | awk '{print strftime("%c",$1)}'`
}

gsm_get_params()
{
  local tmp
  gsm_changed="no"
  tmp=`icd-config --db=$ICD_CONFIG_DB sget gsm enabled`
  if [ "$gsm_enabled" != "$tmp" ]; then
    gsm_enabled="$tmp"
    gsm_changed="yes"
  fi
  tmp=`icd-config --db=$ICD_CONFIG_DB sget gsm connect-with-transfer`
  if [ "$gsm_connect_with_transfer" != "$tmp" ]; then
    gsm_connect_with_transfer="$tmp"
    gsm_changed="yes"
  fi
  tmp=`icd-config --db=$ICD_CONFIG_DB sget device server-sync-period-mins`
  if [ "$gsm_conn" != "$tmp" ]; then
    gsm_conn="$tmp"
    gsm_changed="yes"
  fi
  #calculate begin values
  gsm_set_time
}
gsm_configure_wvdial()
{
  mkdir -p /tmp/ppp/peers
  cat << WVDIAL_CONF > /tmp/ppp/wvdial.conf
  [Dialer orange]
  Modem = /dev/ttyUSB0
  Baud = 57600
  Init1 = ATH
  Init2 = ATE1
  Init3 = AT+CGDCONT=1,"IP","internet"
  Dial Command = ATD
  Phone = *99#
  Stupid mode = yes
  Username = "internet"
  Password = "internet"

  [Dialer opin]
  Modem = /dev/ttyUSB0
  Init1 = AT+CPIN=2508
WVDIAL_CONF
  echo name wvdial > /tmp/ppp/peers/wvdial
}
gsm_configure_modeswitch() 
{
  mkdir -p /tmp/ppp/peers
  sleep 22 # wait for modem initializing on first start (kernel needs time)

  if ! [ -c /dev/ttyUSB0 ]; then
    cat << USB_MODESWITCH_CFG > /tmp/ppp/modeswitch.conf
    # Huawei E1752
    DefaultVendor=  0x12d1
    DefaultProduct= 0x1446
    TargetVendor=   0x12d1
    TargetProdct=   0x1001
    MessageEndpoint=0x01
    MessageContent="55534243000000000000000000000011060000000000000000000000000000"
USB_MODESWITCH_CFG
    usb_modeswitch -c /tmp/ppp/modeswitch.conf
    sleep 22 # wait for second initializing after modeswitch (kernel needs time)
  fi
}
gsm_yes()
{
  local utime
  utime=`date +%s`

  if [ "$gsm_connect_with_transfer" = "yes" ]; then

    if [ "$gsm_working" != "yes" ]; then
      if [ "$gsm_time_start" -lt "$utime" ]; then #time for start
        echo "::::" `date` ":: Gsm start" #calculate new time

        gsm_configure_modeswitch

        gsm_configure_wvdial
        wvdial opin -C /tmp/ppp/wvdial.conf 
        icd-run-daemon -- wvdial orange -C /tmp/ppp/wvdial.conf
        echo 10.64.64.64 > /tmp/route_ppp0

        export gsm_working="yes"
        icd-net-route-resolv

        gsm_set_time
      fi
    else
      if [ "$gsm_time_stop" -lt "$utime" ]; then
        echo "::::" `date` ":: Gsm stop"
        killall wvdial
        rm /tmp/route_ppp0
        export gsm_working="no"
        icd-net-route-resolv
        gsm_set_time
      fi
    fi
  fi
}
gsm_no()
{
  echo "::::" `date` ":: Gsm no"
}

#####################################################################################

touch /tmp/last_configdb_check
eth_get_params
eth_yes
wifi_get_params
gsm_get_params


while [ 1 = 1 ]
do
  sleep 30

  if [ "$ICD_CONFIG_DB" -nt /tmp/last_configdb_check ]; then #db edited after last check
    new_cfg="yes"
  else
    new_cfg="no"
  fi

  if [ $new_cfg = "yes" ]; then #newdb, get params
    touch /tmp/last_configdb_check
    eth_get_params
    wifi_get_params
    gsm_get_params
  fi

  if [ $new_cfg = "yes" ] && [ "$eth_changed" = "yes" ]
  then #changed eth params == full reset
    eth_no
    sleep 15 
  fi
  eth_yes #eth needed all the time, monitoring

  if [ $new_cfg = "yes" ] && [ "$wifi_changed" = "yes" ]; then #new wifi params
    if [ "$wifi_enabled" = "no" ]; then #change to off
      wifi_no
    else #chango to yes or no change
      wifi_yes
    fi
  else #no wifi change
    if [ "$wifi_enabled" = "yes" ]; then #if running then monitor it
      wifi_yes
    fi
  fi

  if [ $new_cfg = "yes" ] && [ "$gsm_changed" = "yes" ]; then #new gsm params
    if [ "$gsm_enabled" = "no" ]; then #change to off
      gsm_no
    else #chango to yes or no change
      gsm_yes
    fi
  else #no gsm change
    if [ "$gsm_enabled" = "yes" ]; then #if running then monitor it
      gsm_yes
    fi
  fi

  icd-net-route-resolv


done
