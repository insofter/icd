/* icdtcp3SoapProxy.cpp
   Generated by gSOAP 2.8.8 from schem.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "icdtcp3SoapProxy.h"

icdtcp3SoapProxy::icdtcp3SoapProxy()
{	icdtcp3SoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

icdtcp3SoapProxy::icdtcp3SoapProxy(const struct soap &_soap) : soap(_soap)
{ }

icdtcp3SoapProxy::icdtcp3SoapProxy(const char *url)
{	icdtcp3SoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

icdtcp3SoapProxy::icdtcp3SoapProxy(soap_mode iomode)
{	icdtcp3SoapProxy_init(iomode, iomode);
}

icdtcp3SoapProxy::icdtcp3SoapProxy(const char *url, soap_mode iomode)
{	icdtcp3SoapProxy_init(iomode, iomode);
	soap_endpoint = url;
}

icdtcp3SoapProxy::icdtcp3SoapProxy(soap_mode imode, soap_mode omode)
{	icdtcp3SoapProxy_init(imode, omode);
}

icdtcp3SoapProxy::~icdtcp3SoapProxy()
{ }

void icdtcp3SoapProxy::icdtcp3SoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://www.w3.org/2003/05/soap-envelope", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://www.w3.org/2003/05/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"icd2", "http://insofter.pl/webservices/icdtcp3Soap", NULL, NULL},
	{"icd1", "http://insofter.pl/webservices", NULL, NULL},
	{"icd3", "http://insofter.pl/webservices/icdtcp3Soap12", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void icdtcp3SoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void icdtcp3SoapProxy::reset()
{	destroy();
	soap_done(this);
	soap_init(this);
	icdtcp3SoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void icdtcp3SoapProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *icdtcp3SoapProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *icdtcp3SoapProxy::soap_fault()
{	return this->fault;
}

const char *icdtcp3SoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *icdtcp3SoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int icdtcp3SoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

int icdtcp3SoapProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void icdtcp3SoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void icdtcp3SoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *icdtcp3SoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int icdtcp3SoapProxy::GetTime(const char *endpoint, const char *soap_action, _icd1__GetTime *icd1__GetTime, _icd1__GetTimeResponse *icd1__GetTimeResponse)
{	struct soap *soap = this;
	struct __icd2__GetTime soap_tmp___icd2__GetTime;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.123.194/icdtcp3/icdtcp3.asmx";
	if (!soap_action)
		soap_action = "http://insofter.pl/webservices/GetTime";
	soap->encodingStyle = NULL;
	soap_tmp___icd2__GetTime.icd1__GetTime = icd1__GetTime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___icd2__GetTime(soap, &soap_tmp___icd2__GetTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___icd2__GetTime(soap, &soap_tmp___icd2__GetTime, "-icd2:GetTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___icd2__GetTime(soap, &soap_tmp___icd2__GetTime, "-icd2:GetTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!icd1__GetTimeResponse)
		return soap_closesock(soap);
	icd1__GetTimeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	icd1__GetTimeResponse->soap_get(soap, "icd1:GetTimeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int icdtcp3SoapProxy::LoginDevice(const char *endpoint, const char *soap_action, _icd1__LoginDevice *icd1__LoginDevice, _icd1__LoginDeviceResponse *icd1__LoginDeviceResponse)
{	struct soap *soap = this;
	struct __icd2__LoginDevice soap_tmp___icd2__LoginDevice;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.123.194/icdtcp3/icdtcp3.asmx";
	if (!soap_action)
		soap_action = "http://insofter.pl/webservices/LoginDevice";
	soap->encodingStyle = NULL;
	soap_tmp___icd2__LoginDevice.icd1__LoginDevice = icd1__LoginDevice;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___icd2__LoginDevice(soap, &soap_tmp___icd2__LoginDevice);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___icd2__LoginDevice(soap, &soap_tmp___icd2__LoginDevice, "-icd2:LoginDevice", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___icd2__LoginDevice(soap, &soap_tmp___icd2__LoginDevice, "-icd2:LoginDevice", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!icd1__LoginDeviceResponse)
		return soap_closesock(soap);
	icd1__LoginDeviceResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	icd1__LoginDeviceResponse->soap_get(soap, "icd1:LoginDeviceResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int icdtcp3SoapProxy::SendData(const char *endpoint, const char *soap_action, _icd1__SendData *icd1__SendData, _icd1__SendDataResponse *icd1__SendDataResponse)
{	struct soap *soap = this;
	struct __icd2__SendData soap_tmp___icd2__SendData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.123.194/icdtcp3/icdtcp3.asmx";
	if (!soap_action)
		soap_action = "http://insofter.pl/webservices/SendData";
	soap->encodingStyle = NULL;
	soap_tmp___icd2__SendData.icd1__SendData = icd1__SendData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___icd2__SendData(soap, &soap_tmp___icd2__SendData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___icd2__SendData(soap, &soap_tmp___icd2__SendData, "-icd2:SendData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___icd2__SendData(soap, &soap_tmp___icd2__SendData, "-icd2:SendData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!icd1__SendDataResponse)
		return soap_closesock(soap);
	icd1__SendDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	icd1__SendDataResponse->soap_get(soap, "icd1:SendDataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int icdtcp3SoapProxy::SendData3(const char *endpoint, const char *soap_action, _icd1__SendData3 *icd1__SendData3, _icd1__SendData3Response *icd1__SendData3Response)
{	struct soap *soap = this;
	struct __icd2__SendData3 soap_tmp___icd2__SendData3;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.123.194/icdtcp3/icdtcp3.asmx";
	if (!soap_action)
		soap_action = "http://insofter.pl/webservices/SendData3";
	soap->encodingStyle = NULL;
	soap_tmp___icd2__SendData3.icd1__SendData3 = icd1__SendData3;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___icd2__SendData3(soap, &soap_tmp___icd2__SendData3);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___icd2__SendData3(soap, &soap_tmp___icd2__SendData3, "-icd2:SendData3", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___icd2__SendData3(soap, &soap_tmp___icd2__SendData3, "-icd2:SendData3", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!icd1__SendData3Response)
		return soap_closesock(soap);
	icd1__SendData3Response->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	icd1__SendData3Response->soap_get(soap, "icd1:SendData3Response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int icdtcp3SoapProxy::LogoutDevice(const char *endpoint, const char *soap_action, _icd1__LogoutDevice *icd1__LogoutDevice, _icd1__LogoutDeviceResponse *icd1__LogoutDeviceResponse)
{	struct soap *soap = this;
	struct __icd2__LogoutDevice soap_tmp___icd2__LogoutDevice;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.123.194/icdtcp3/icdtcp3.asmx";
	if (!soap_action)
		soap_action = "http://insofter.pl/webservices/LogoutDevice";
	soap->encodingStyle = NULL;
	soap_tmp___icd2__LogoutDevice.icd1__LogoutDevice = icd1__LogoutDevice;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___icd2__LogoutDevice(soap, &soap_tmp___icd2__LogoutDevice);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___icd2__LogoutDevice(soap, &soap_tmp___icd2__LogoutDevice, "-icd2:LogoutDevice", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___icd2__LogoutDevice(soap, &soap_tmp___icd2__LogoutDevice, "-icd2:LogoutDevice", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!icd1__LogoutDeviceResponse)
		return soap_closesock(soap);
	icd1__LogoutDeviceResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	icd1__LogoutDeviceResponse->soap_get(soap, "icd1:LogoutDeviceResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int icdtcp3SoapProxy::TestSession(const char *endpoint, const char *soap_action, _icd1__TestSession *icd1__TestSession, _icd1__TestSessionResponse *icd1__TestSessionResponse)
{	struct soap *soap = this;
	struct __icd2__TestSession soap_tmp___icd2__TestSession;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.123.194/icdtcp3/icdtcp3.asmx";
	if (!soap_action)
		soap_action = "http://insofter.pl/webservices/TestSession";
	soap->encodingStyle = NULL;
	soap_tmp___icd2__TestSession.icd1__TestSession = icd1__TestSession;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___icd2__TestSession(soap, &soap_tmp___icd2__TestSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___icd2__TestSession(soap, &soap_tmp___icd2__TestSession, "-icd2:TestSession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___icd2__TestSession(soap, &soap_tmp___icd2__TestSession, "-icd2:TestSession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!icd1__TestSessionResponse)
		return soap_closesock(soap);
	icd1__TestSessionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	icd1__TestSessionResponse->soap_get(soap, "icd1:TestSessionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int icdtcp3SoapProxy::GetDeviceUpdateInfo(const char *endpoint, const char *soap_action, _icd1__GetDeviceUpdateInfo *icd1__GetDeviceUpdateInfo, _icd1__GetDeviceUpdateInfoResponse *icd1__GetDeviceUpdateInfoResponse)
{	struct soap *soap = this;
	struct __icd2__GetDeviceUpdateInfo soap_tmp___icd2__GetDeviceUpdateInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.123.194/icdtcp3/icdtcp3.asmx";
	if (!soap_action)
		soap_action = "http://insofter.pl/webservices/GetDeviceUpdateInfo";
	soap->encodingStyle = NULL;
	soap_tmp___icd2__GetDeviceUpdateInfo.icd1__GetDeviceUpdateInfo = icd1__GetDeviceUpdateInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___icd2__GetDeviceUpdateInfo(soap, &soap_tmp___icd2__GetDeviceUpdateInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___icd2__GetDeviceUpdateInfo(soap, &soap_tmp___icd2__GetDeviceUpdateInfo, "-icd2:GetDeviceUpdateInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___icd2__GetDeviceUpdateInfo(soap, &soap_tmp___icd2__GetDeviceUpdateInfo, "-icd2:GetDeviceUpdateInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!icd1__GetDeviceUpdateInfoResponse)
		return soap_closesock(soap);
	icd1__GetDeviceUpdateInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	icd1__GetDeviceUpdateInfoResponse->soap_get(soap, "icd1:GetDeviceUpdateInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int icdtcp3SoapProxy::GetMacIdd(const char *endpoint, const char *soap_action, _icd1__GetMacIdd *icd1__GetMacIdd, _icd1__GetMacIddResponse *icd1__GetMacIddResponse)
{	struct soap *soap = this;
	struct __icd2__GetMacIdd soap_tmp___icd2__GetMacIdd;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.123.194/icdtcp3/icdtcp3.asmx";
	if (!soap_action)
		soap_action = "http://insofter.pl/webservices/GetMacIdd";
	soap->encodingStyle = NULL;
	soap_tmp___icd2__GetMacIdd.icd1__GetMacIdd = icd1__GetMacIdd;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___icd2__GetMacIdd(soap, &soap_tmp___icd2__GetMacIdd);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___icd2__GetMacIdd(soap, &soap_tmp___icd2__GetMacIdd, "-icd2:GetMacIdd", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___icd2__GetMacIdd(soap, &soap_tmp___icd2__GetMacIdd, "-icd2:GetMacIdd", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!icd1__GetMacIddResponse)
		return soap_closesock(soap);
	icd1__GetMacIddResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	icd1__GetMacIddResponse->soap_get(soap, "icd1:GetMacIddResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
