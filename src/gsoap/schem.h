/* schem.h
   Generated by wsdl2h 2.8.8 from schem.wsdl and typemap.dat
   2012-08-31 09:02:58 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2012 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on schem.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/icdtcpwebservice/icdtcpws                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/

// This service uses SOAP 1.2 namespaces:
//gsoap SOAP-ENV schema namespace:	http://www.w3.org/2003/05/soap-envelope
//gsoap SOAP-ENC schema namespace:	http://www.w3.org/2003/05/soap-encoding

/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

icd1 = "http://tempuri.org/icdtcpwebservice/icdtcpws"

*/

#define SOAP_NAMESPACE_OF_icd1	"http://tempuri.org/icdtcpwebservice/icdtcpws"
//gsoap icd1  schema namespace:	http://tempuri.org/icdtcpwebservice/icdtcpws
//gsoap icd1  schema elementForm:	qualified
//gsoap icd1  schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _icd1__HelloWorld.
class _icd1__HelloWorld;

//  Forward declaration of class _icd1__HelloWorldResponse.
class _icd1__HelloWorldResponse;

//  Forward declaration of class _icd1__GetTime.
class _icd1__GetTime;

//  Forward declaration of class _icd1__GetTimeResponse.
class _icd1__GetTimeResponse;

//  Forward declaration of class _icd1__GetTime2.
class _icd1__GetTime2;

//  Forward declaration of class _icd1__GetTime2Response.
class _icd1__GetTime2Response;

//  Forward declaration of class _icd1__TestSession.
class _icd1__TestSession;

//  Forward declaration of class _icd1__TestSessionResponse.
class _icd1__TestSessionResponse;

//  Forward declaration of class _icd1__OutDevice.
class _icd1__OutDevice;

//  Forward declaration of class _icd1__OutDeviceResponse.
class _icd1__OutDeviceResponse;

//  Forward declaration of class _icd1__LoginDevice.
class _icd1__LoginDevice;

//  Forward declaration of class _icd1__LoginDeviceResponse.
class _icd1__LoginDeviceResponse;

//  Forward declaration of class _icd1__GetUpdateDataBin.
class _icd1__GetUpdateDataBin;

//  Forward declaration of class _icd1__GetUpdateDataBinResponse.
class _icd1__GetUpdateDataBinResponse;

//  Forward declaration of class _icd1__HasUpdateBin.
class _icd1__HasUpdateBin;

//  Forward declaration of class _icd1__HasUpdateBinResponse.
class _icd1__HasUpdateBinResponse;

//  Forward declaration of class _icd1__SendData.
class _icd1__SendData;

//  Forward declaration of class _icd1__SendDataResponse.
class _icd1__SendDataResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/icdtcpwebservice/icdtcpws                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/icdtcpwebservice/icdtcpws                             *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":HelloWorld

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":HelloWorld is a complexType.
class _icd1__HelloWorld
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":HelloWorldResponse

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":HelloWorldResponse is a complexType.
class _icd1__HelloWorldResponse
{ public:
/// Element HelloWorldResult of type xs:string.
    std::string*                         HelloWorldResult               0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":GetTime

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":GetTime is a complexType.
class _icd1__GetTime
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":GetTimeResponse

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":GetTimeResponse is a complexType.
class _icd1__GetTimeResponse
{ public:
/// Element GetTimeResult of type xs:string.
    std::string*                         GetTimeResult                  0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":GetTime2

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":GetTime2 is a complexType.
class _icd1__GetTime2
{ public:
/// Element l of type xs:int.
    int                                  l                              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":GetTime2Response

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":GetTime2Response is a complexType.
class _icd1__GetTime2Response
{ public:
/// Element GetTime2Result of type xs:string.
    std::string*                         GetTime2Result                 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":TestSession

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":TestSession is a complexType.
class _icd1__TestSession
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":TestSessionResponse

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":TestSessionResponse is a complexType.
class _icd1__TestSessionResponse
{ public:
/// Element TestSessionResult of type xs:int.
    int                                  TestSessionResult              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":OutDevice

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":OutDevice is a complexType.
class _icd1__OutDevice
{ public:
/// Element ErrorNo of type xs:int.
    int                                  ErrorNo                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":OutDeviceResponse

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":OutDeviceResponse is a complexType.
class _icd1__OutDeviceResponse
{ public:
/// Element OutDeviceResult of type xs:string.
    std::string*                         OutDeviceResult                0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":LoginDevice

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":LoginDevice is a complexType.
class _icd1__LoginDevice
{ public:
/// Element idd of type xs:int.
    int                                  idd                            1;	///< Required element.
/// Element name of type xs:string.
    std::string*                         name                           0;	///< Optional element.
/// Element DevInfo of type xs:string.
    std::string*                         DevInfo                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":LoginDeviceResponse

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":LoginDeviceResponse is a complexType.
class _icd1__LoginDeviceResponse
{ public:
/// Element LoginDeviceResult of type xs:string.
    std::string*                         LoginDeviceResult              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":GetUpdateDataBin

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":GetUpdateDataBin is a complexType.
class _icd1__GetUpdateDataBin
{ public:
/// Element nPage of type xs:int.
    int                                  nPage                          1;	///< Required element.
/// Element nSize of type xs:int.
    int                                  nSize                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":GetUpdateDataBinResponse

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":GetUpdateDataBinResponse is a complexType.
class _icd1__GetUpdateDataBinResponse
{ public:
/// Element GetUpdateDataBinResult of type xs:string.
    std::string*                         GetUpdateDataBinResult         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":HasUpdateBin

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":HasUpdateBin is a complexType.
class _icd1__HasUpdateBin
{ public:
/// Element DevVer of type xs:string.
    std::string*                         DevVer                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":HasUpdateBinResponse

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":HasUpdateBinResponse is a complexType.
class _icd1__HasUpdateBinResponse
{ public:
/// Element HasUpdateBinResult of type xs:string.
    std::string*                         HasUpdateBinResult             0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":SendData

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":SendData is a complexType.
class _icd1__SendData
{ public:
/// Element data of type xs:string.
    std::string*                         data                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":SendDataResponse

/// "http://tempuri.org/icdtcpwebservice/icdtcpws":SendDataResponse is a complexType.
class _icd1__SendDataResponse
{ public:
/// Element SendDataResult of type xs:string.
    std::string*                         SendDataResult                 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/icdtcpwebservice/icdtcpws                             *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":string of type xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://tempuri.org/icdtcpwebservice/icdtcpws":int of type xs:int.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/icdtcpwebservice/icdtcpws                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap icd2 service name:	Service1Soap 
//gsoap icd2 service type:	Service1Soap 
//gsoap icd2 service port:	http://192.168.123.4/icdtcp3webservice/Service1.asmx 
//gsoap icd2 service namespace:	http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap 
//gsoap icd2 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap icd3 service name:	Service1Soap12 
//gsoap icd3 service type:	Service1Soap 
//gsoap icd3 service port:	http://192.168.123.4/icdtcp3webservice/Service1.asmx 
//gsoap icd3 service namespace:	http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap12 
//gsoap icd3 service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref Service1Soap

  - @ref Service1Soap12

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page Service1Soap Binding "Service1Soap"

@section Service1Soap_operations Operations of Binding  "Service1Soap"

  - @ref __icd2__HelloWorld

  - @ref __icd2__GetTime

  - @ref __icd2__GetTime2

  - @ref __icd2__TestSession

  - @ref __icd2__OutDevice

  - @ref __icd2__LoginDevice

  - @ref __icd2__GetUpdateDataBin

  - @ref __icd2__HasUpdateBin

  - @ref __icd2__SendData

@section Service1Soap_ports Endpoints of Binding  "Service1Soap"

  - http://192.168.123.4/icdtcp3webservice/Service1.asmx

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page Service1Soap12 Binding "Service1Soap12"

@section Service1Soap12_operations Operations of Binding  "Service1Soap12"

  - @ref __icd3__HelloWorld

  - @ref __icd3__GetTime

  - @ref __icd3__GetTime2

  - @ref __icd3__TestSession

  - @ref __icd3__OutDevice

  - @ref __icd3__LoginDevice

  - @ref __icd3__GetUpdateDataBin

  - @ref __icd3__HasUpdateBin

  - @ref __icd3__SendData

@section Service1Soap12_ports Endpoints of Binding  "Service1Soap12"

  - http://192.168.123.4/icdtcp3webservice/Service1.asmx

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   Service1Soap                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd2__HelloWorld                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd2__HelloWorld" of service binding "Service1Soap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/HelloWorld"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/HelloWorld"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/HelloWorldResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd2__HelloWorld(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__HelloWorld*                  icd1__HelloWorld,
    // response parameters:
    _icd1__HelloWorldResponse*          icd1__HelloWorldResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd2__HelloWorld(
    struct soap *soap,
    // request parameters:
    _icd1__HelloWorld*                  icd1__HelloWorld,
    // response parameters:
    _icd1__HelloWorldResponse*          icd1__HelloWorldResponse
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd2 service method-style:	HelloWorld document
//gsoap icd2 service method-encoding:	HelloWorld literal
//gsoap icd2 service method-action:	HelloWorld http://tempuri.org/icdtcpwebservice/icdtcpws/HelloWorld
//gsoap icd2 service method-output-action:	HelloWorld http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/HelloWorldResponse
int __icd2__HelloWorld(
    _icd1__HelloWorld*                  icd1__HelloWorld,	///< Request parameter
    _icd1__HelloWorldResponse*          icd1__HelloWorldResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd2__GetTime                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd2__GetTime" of service binding "Service1Soap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/GetTime"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetTime"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd2__GetTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__GetTime*                     icd1__GetTime,
    // response parameters:
    _icd1__GetTimeResponse*             icd1__GetTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd2__GetTime(
    struct soap *soap,
    // request parameters:
    _icd1__GetTime*                     icd1__GetTime,
    // response parameters:
    _icd1__GetTimeResponse*             icd1__GetTimeResponse
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd2 service method-style:	GetTime document
//gsoap icd2 service method-encoding:	GetTime literal
//gsoap icd2 service method-action:	GetTime http://tempuri.org/icdtcpwebservice/icdtcpws/GetTime
//gsoap icd2 service method-output-action:	GetTime http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetTimeResponse
int __icd2__GetTime(
    _icd1__GetTime*                     icd1__GetTime,	///< Request parameter
    _icd1__GetTimeResponse*             icd1__GetTimeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd2__GetTime2                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd2__GetTime2" of service binding "Service1Soap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/GetTime2"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetTime2"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetTime2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd2__GetTime2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__GetTime2*                    icd1__GetTime2,
    // response parameters:
    _icd1__GetTime2Response*            icd1__GetTime2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd2__GetTime2(
    struct soap *soap,
    // request parameters:
    _icd1__GetTime2*                    icd1__GetTime2,
    // response parameters:
    _icd1__GetTime2Response*            icd1__GetTime2Response
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd2 service method-style:	GetTime2 document
//gsoap icd2 service method-encoding:	GetTime2 literal
//gsoap icd2 service method-action:	GetTime2 http://tempuri.org/icdtcpwebservice/icdtcpws/GetTime2
//gsoap icd2 service method-output-action:	GetTime2 http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetTime2Response
int __icd2__GetTime2(
    _icd1__GetTime2*                    icd1__GetTime2,	///< Request parameter
    _icd1__GetTime2Response*            icd1__GetTime2Response	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd2__TestSession                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd2__TestSession" of service binding "Service1Soap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/TestSession"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/TestSession"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/TestSessionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd2__TestSession(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__TestSession*                 icd1__TestSession,
    // response parameters:
    _icd1__TestSessionResponse*         icd1__TestSessionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd2__TestSession(
    struct soap *soap,
    // request parameters:
    _icd1__TestSession*                 icd1__TestSession,
    // response parameters:
    _icd1__TestSessionResponse*         icd1__TestSessionResponse
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd2 service method-style:	TestSession document
//gsoap icd2 service method-encoding:	TestSession literal
//gsoap icd2 service method-action:	TestSession http://tempuri.org/icdtcpwebservice/icdtcpws/TestSession
//gsoap icd2 service method-output-action:	TestSession http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/TestSessionResponse
int __icd2__TestSession(
    _icd1__TestSession*                 icd1__TestSession,	///< Request parameter
    _icd1__TestSessionResponse*         icd1__TestSessionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd2__OutDevice                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd2__OutDevice" of service binding "Service1Soap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/OutDevice"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/OutDevice"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/OutDeviceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd2__OutDevice(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__OutDevice*                   icd1__OutDevice,
    // response parameters:
    _icd1__OutDeviceResponse*           icd1__OutDeviceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd2__OutDevice(
    struct soap *soap,
    // request parameters:
    _icd1__OutDevice*                   icd1__OutDevice,
    // response parameters:
    _icd1__OutDeviceResponse*           icd1__OutDeviceResponse
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd2 service method-style:	OutDevice document
//gsoap icd2 service method-encoding:	OutDevice literal
//gsoap icd2 service method-action:	OutDevice http://tempuri.org/icdtcpwebservice/icdtcpws/OutDevice
//gsoap icd2 service method-output-action:	OutDevice http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/OutDeviceResponse
int __icd2__OutDevice(
    _icd1__OutDevice*                   icd1__OutDevice,	///< Request parameter
    _icd1__OutDeviceResponse*           icd1__OutDeviceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd2__LoginDevice                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd2__LoginDevice" of service binding "Service1Soap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/LoginDevice"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/LoginDevice"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/LoginDeviceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd2__LoginDevice(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__LoginDevice*                 icd1__LoginDevice,
    // response parameters:
    _icd1__LoginDeviceResponse*         icd1__LoginDeviceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd2__LoginDevice(
    struct soap *soap,
    // request parameters:
    _icd1__LoginDevice*                 icd1__LoginDevice,
    // response parameters:
    _icd1__LoginDeviceResponse*         icd1__LoginDeviceResponse
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd2 service method-style:	LoginDevice document
//gsoap icd2 service method-encoding:	LoginDevice literal
//gsoap icd2 service method-action:	LoginDevice http://tempuri.org/icdtcpwebservice/icdtcpws/LoginDevice
//gsoap icd2 service method-output-action:	LoginDevice http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/LoginDeviceResponse
int __icd2__LoginDevice(
    _icd1__LoginDevice*                 icd1__LoginDevice,	///< Request parameter
    _icd1__LoginDeviceResponse*         icd1__LoginDeviceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd2__GetUpdateDataBin                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd2__GetUpdateDataBin" of service binding "Service1Soap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/GetUpdateDataBin"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetUpdateDataBin"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetUpdateDataBinResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd2__GetUpdateDataBin(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__GetUpdateDataBin*            icd1__GetUpdateDataBin,
    // response parameters:
    _icd1__GetUpdateDataBinResponse*    icd1__GetUpdateDataBinResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd2__GetUpdateDataBin(
    struct soap *soap,
    // request parameters:
    _icd1__GetUpdateDataBin*            icd1__GetUpdateDataBin,
    // response parameters:
    _icd1__GetUpdateDataBinResponse*    icd1__GetUpdateDataBinResponse
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd2 service method-style:	GetUpdateDataBin document
//gsoap icd2 service method-encoding:	GetUpdateDataBin literal
//gsoap icd2 service method-action:	GetUpdateDataBin http://tempuri.org/icdtcpwebservice/icdtcpws/GetUpdateDataBin
//gsoap icd2 service method-output-action:	GetUpdateDataBin http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetUpdateDataBinResponse
int __icd2__GetUpdateDataBin(
    _icd1__GetUpdateDataBin*            icd1__GetUpdateDataBin,	///< Request parameter
    _icd1__GetUpdateDataBinResponse*    icd1__GetUpdateDataBinResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd2__HasUpdateBin                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd2__HasUpdateBin" of service binding "Service1Soap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/HasUpdateBin"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/HasUpdateBin"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/HasUpdateBinResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd2__HasUpdateBin(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__HasUpdateBin*                icd1__HasUpdateBin,
    // response parameters:
    _icd1__HasUpdateBinResponse*        icd1__HasUpdateBinResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd2__HasUpdateBin(
    struct soap *soap,
    // request parameters:
    _icd1__HasUpdateBin*                icd1__HasUpdateBin,
    // response parameters:
    _icd1__HasUpdateBinResponse*        icd1__HasUpdateBinResponse
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd2 service method-style:	HasUpdateBin document
//gsoap icd2 service method-encoding:	HasUpdateBin literal
//gsoap icd2 service method-action:	HasUpdateBin http://tempuri.org/icdtcpwebservice/icdtcpws/HasUpdateBin
//gsoap icd2 service method-output-action:	HasUpdateBin http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/HasUpdateBinResponse
int __icd2__HasUpdateBin(
    _icd1__HasUpdateBin*                icd1__HasUpdateBin,	///< Request parameter
    _icd1__HasUpdateBinResponse*        icd1__HasUpdateBinResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd2__SendData                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd2__SendData" of service binding "Service1Soap"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/SendData"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/SendData"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/SendDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd2__SendData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__SendData*                    icd1__SendData,
    // response parameters:
    _icd1__SendDataResponse*            icd1__SendDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd2__SendData(
    struct soap *soap,
    // request parameters:
    _icd1__SendData*                    icd1__SendData,
    // response parameters:
    _icd1__SendDataResponse*            icd1__SendDataResponse
  );
@endcode

C++ proxy class (defined in soapService1SoapProxy.h):
@code
  class Service1SoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1SoapService.h):
@code
  class Service1SoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd2 service method-style:	SendData document
//gsoap icd2 service method-encoding:	SendData literal
//gsoap icd2 service method-action:	SendData http://tempuri.org/icdtcpwebservice/icdtcpws/SendData
//gsoap icd2 service method-output-action:	SendData http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/SendDataResponse
int __icd2__SendData(
    _icd1__SendData*                    icd1__SendData,	///< Request parameter
    _icd1__SendDataResponse*            icd1__SendDataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   Service1Soap12                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd3__HelloWorld                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd3__HelloWorld" of service binding "Service1Soap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/HelloWorld"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/HelloWorld"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/HelloWorldResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd3__HelloWorld(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__HelloWorld*                  icd1__HelloWorld,
    // response parameters:
    _icd1__HelloWorldResponse*          icd1__HelloWorldResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd3__HelloWorld(
    struct soap *soap,
    // request parameters:
    _icd1__HelloWorld*                  icd1__HelloWorld,
    // response parameters:
    _icd1__HelloWorldResponse*          icd1__HelloWorldResponse
  );
@endcode

C++ proxy class (defined in soapService1Soap12Proxy.h):
@code
  class Service1Soap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1Soap12Service.h):
@code
  class Service1Soap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd3 service method-style:	HelloWorld document
//gsoap icd3 service method-encoding:	HelloWorld literal
//gsoap icd3 service method-action:	HelloWorld http://tempuri.org/icdtcpwebservice/icdtcpws/HelloWorld
//gsoap icd3 service method-output-action:	HelloWorld http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/HelloWorldResponse
int __icd3__HelloWorld(
    _icd1__HelloWorld*                  icd1__HelloWorld,	///< Request parameter
    _icd1__HelloWorldResponse*          icd1__HelloWorldResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd3__GetTime                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd3__GetTime" of service binding "Service1Soap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/GetTime"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetTime"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd3__GetTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__GetTime*                     icd1__GetTime,
    // response parameters:
    _icd1__GetTimeResponse*             icd1__GetTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd3__GetTime(
    struct soap *soap,
    // request parameters:
    _icd1__GetTime*                     icd1__GetTime,
    // response parameters:
    _icd1__GetTimeResponse*             icd1__GetTimeResponse
  );
@endcode

C++ proxy class (defined in soapService1Soap12Proxy.h):
@code
  class Service1Soap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1Soap12Service.h):
@code
  class Service1Soap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd3 service method-style:	GetTime document
//gsoap icd3 service method-encoding:	GetTime literal
//gsoap icd3 service method-action:	GetTime http://tempuri.org/icdtcpwebservice/icdtcpws/GetTime
//gsoap icd3 service method-output-action:	GetTime http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetTimeResponse
int __icd3__GetTime(
    _icd1__GetTime*                     icd1__GetTime,	///< Request parameter
    _icd1__GetTimeResponse*             icd1__GetTimeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd3__GetTime2                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd3__GetTime2" of service binding "Service1Soap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/GetTime2"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetTime2"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetTime2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd3__GetTime2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__GetTime2*                    icd1__GetTime2,
    // response parameters:
    _icd1__GetTime2Response*            icd1__GetTime2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd3__GetTime2(
    struct soap *soap,
    // request parameters:
    _icd1__GetTime2*                    icd1__GetTime2,
    // response parameters:
    _icd1__GetTime2Response*            icd1__GetTime2Response
  );
@endcode

C++ proxy class (defined in soapService1Soap12Proxy.h):
@code
  class Service1Soap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1Soap12Service.h):
@code
  class Service1Soap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd3 service method-style:	GetTime2 document
//gsoap icd3 service method-encoding:	GetTime2 literal
//gsoap icd3 service method-action:	GetTime2 http://tempuri.org/icdtcpwebservice/icdtcpws/GetTime2
//gsoap icd3 service method-output-action:	GetTime2 http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetTime2Response
int __icd3__GetTime2(
    _icd1__GetTime2*                    icd1__GetTime2,	///< Request parameter
    _icd1__GetTime2Response*            icd1__GetTime2Response	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd3__TestSession                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd3__TestSession" of service binding "Service1Soap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/TestSession"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/TestSession"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/TestSessionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd3__TestSession(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__TestSession*                 icd1__TestSession,
    // response parameters:
    _icd1__TestSessionResponse*         icd1__TestSessionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd3__TestSession(
    struct soap *soap,
    // request parameters:
    _icd1__TestSession*                 icd1__TestSession,
    // response parameters:
    _icd1__TestSessionResponse*         icd1__TestSessionResponse
  );
@endcode

C++ proxy class (defined in soapService1Soap12Proxy.h):
@code
  class Service1Soap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1Soap12Service.h):
@code
  class Service1Soap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd3 service method-style:	TestSession document
//gsoap icd3 service method-encoding:	TestSession literal
//gsoap icd3 service method-action:	TestSession http://tempuri.org/icdtcpwebservice/icdtcpws/TestSession
//gsoap icd3 service method-output-action:	TestSession http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/TestSessionResponse
int __icd3__TestSession(
    _icd1__TestSession*                 icd1__TestSession,	///< Request parameter
    _icd1__TestSessionResponse*         icd1__TestSessionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd3__OutDevice                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd3__OutDevice" of service binding "Service1Soap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/OutDevice"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/OutDevice"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/OutDeviceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd3__OutDevice(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__OutDevice*                   icd1__OutDevice,
    // response parameters:
    _icd1__OutDeviceResponse*           icd1__OutDeviceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd3__OutDevice(
    struct soap *soap,
    // request parameters:
    _icd1__OutDevice*                   icd1__OutDevice,
    // response parameters:
    _icd1__OutDeviceResponse*           icd1__OutDeviceResponse
  );
@endcode

C++ proxy class (defined in soapService1Soap12Proxy.h):
@code
  class Service1Soap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1Soap12Service.h):
@code
  class Service1Soap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd3 service method-style:	OutDevice document
//gsoap icd3 service method-encoding:	OutDevice literal
//gsoap icd3 service method-action:	OutDevice http://tempuri.org/icdtcpwebservice/icdtcpws/OutDevice
//gsoap icd3 service method-output-action:	OutDevice http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/OutDeviceResponse
int __icd3__OutDevice(
    _icd1__OutDevice*                   icd1__OutDevice,	///< Request parameter
    _icd1__OutDeviceResponse*           icd1__OutDeviceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd3__LoginDevice                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd3__LoginDevice" of service binding "Service1Soap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/LoginDevice"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/LoginDevice"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/LoginDeviceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd3__LoginDevice(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__LoginDevice*                 icd1__LoginDevice,
    // response parameters:
    _icd1__LoginDeviceResponse*         icd1__LoginDeviceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd3__LoginDevice(
    struct soap *soap,
    // request parameters:
    _icd1__LoginDevice*                 icd1__LoginDevice,
    // response parameters:
    _icd1__LoginDeviceResponse*         icd1__LoginDeviceResponse
  );
@endcode

C++ proxy class (defined in soapService1Soap12Proxy.h):
@code
  class Service1Soap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1Soap12Service.h):
@code
  class Service1Soap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd3 service method-style:	LoginDevice document
//gsoap icd3 service method-encoding:	LoginDevice literal
//gsoap icd3 service method-action:	LoginDevice http://tempuri.org/icdtcpwebservice/icdtcpws/LoginDevice
//gsoap icd3 service method-output-action:	LoginDevice http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/LoginDeviceResponse
int __icd3__LoginDevice(
    _icd1__LoginDevice*                 icd1__LoginDevice,	///< Request parameter
    _icd1__LoginDeviceResponse*         icd1__LoginDeviceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd3__GetUpdateDataBin                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd3__GetUpdateDataBin" of service binding "Service1Soap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/GetUpdateDataBin"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetUpdateDataBin"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetUpdateDataBinResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd3__GetUpdateDataBin(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__GetUpdateDataBin*            icd1__GetUpdateDataBin,
    // response parameters:
    _icd1__GetUpdateDataBinResponse*    icd1__GetUpdateDataBinResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd3__GetUpdateDataBin(
    struct soap *soap,
    // request parameters:
    _icd1__GetUpdateDataBin*            icd1__GetUpdateDataBin,
    // response parameters:
    _icd1__GetUpdateDataBinResponse*    icd1__GetUpdateDataBinResponse
  );
@endcode

C++ proxy class (defined in soapService1Soap12Proxy.h):
@code
  class Service1Soap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1Soap12Service.h):
@code
  class Service1Soap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd3 service method-style:	GetUpdateDataBin document
//gsoap icd3 service method-encoding:	GetUpdateDataBin literal
//gsoap icd3 service method-action:	GetUpdateDataBin http://tempuri.org/icdtcpwebservice/icdtcpws/GetUpdateDataBin
//gsoap icd3 service method-output-action:	GetUpdateDataBin http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/GetUpdateDataBinResponse
int __icd3__GetUpdateDataBin(
    _icd1__GetUpdateDataBin*            icd1__GetUpdateDataBin,	///< Request parameter
    _icd1__GetUpdateDataBinResponse*    icd1__GetUpdateDataBinResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd3__HasUpdateBin                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd3__HasUpdateBin" of service binding "Service1Soap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/HasUpdateBin"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/HasUpdateBin"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/HasUpdateBinResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd3__HasUpdateBin(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__HasUpdateBin*                icd1__HasUpdateBin,
    // response parameters:
    _icd1__HasUpdateBinResponse*        icd1__HasUpdateBinResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd3__HasUpdateBin(
    struct soap *soap,
    // request parameters:
    _icd1__HasUpdateBin*                icd1__HasUpdateBin,
    // response parameters:
    _icd1__HasUpdateBinResponse*        icd1__HasUpdateBinResponse
  );
@endcode

C++ proxy class (defined in soapService1Soap12Proxy.h):
@code
  class Service1Soap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1Soap12Service.h):
@code
  class Service1Soap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd3 service method-style:	HasUpdateBin document
//gsoap icd3 service method-encoding:	HasUpdateBin literal
//gsoap icd3 service method-action:	HasUpdateBin http://tempuri.org/icdtcpwebservice/icdtcpws/HasUpdateBin
//gsoap icd3 service method-output-action:	HasUpdateBin http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/HasUpdateBinResponse
int __icd3__HasUpdateBin(
    _icd1__HasUpdateBin*                icd1__HasUpdateBin,	///< Request parameter
    _icd1__HasUpdateBinResponse*        icd1__HasUpdateBinResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __icd3__SendData                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__icd3__SendData" of service binding "Service1Soap12"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/icdtcpwebservice/icdtcpws/SendData"

  - Addressing action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/SendData"

  - Addressing response action: "http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/SendDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___icd3__SendData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _icd1__SendData*                    icd1__SendData,
    // response parameters:
    _icd1__SendDataResponse*            icd1__SendDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __icd3__SendData(
    struct soap *soap,
    // request parameters:
    _icd1__SendData*                    icd1__SendData,
    // response parameters:
    _icd1__SendDataResponse*            icd1__SendDataResponse
  );
@endcode

C++ proxy class (defined in soapService1Soap12Proxy.h):
@code
  class Service1Soap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapService1Soap12Service.h):
@code
  class Service1Soap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap icd3 service method-style:	SendData document
//gsoap icd3 service method-encoding:	SendData literal
//gsoap icd3 service method-action:	SendData http://tempuri.org/icdtcpwebservice/icdtcpws/SendData
//gsoap icd3 service method-output-action:	SendData http://tempuri.org/icdtcpwebservice/icdtcpws/Service1Soap/SendDataResponse
int __icd3__SendData(
    _icd1__SendData*                    icd1__SendData,	///< Request parameter
    _icd1__SendDataResponse*            icd1__SendDataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section icd1 Top-level root elements of schema "http://tempuri.org/icdtcpwebservice/icdtcpws"

  - <icd1:HelloWorld> @ref _icd1__HelloWorld
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__HelloWorld(struct soap*, _icd1__HelloWorld*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__HelloWorld(struct soap*, _icd1__HelloWorld*);
    @endcode

  - <icd1:HelloWorldResponse> @ref _icd1__HelloWorldResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__HelloWorldResponse(struct soap*, _icd1__HelloWorldResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__HelloWorldResponse(struct soap*, _icd1__HelloWorldResponse*);
    @endcode

  - <icd1:GetTime> @ref _icd1__GetTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__GetTime(struct soap*, _icd1__GetTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__GetTime(struct soap*, _icd1__GetTime*);
    @endcode

  - <icd1:GetTimeResponse> @ref _icd1__GetTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__GetTimeResponse(struct soap*, _icd1__GetTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__GetTimeResponse(struct soap*, _icd1__GetTimeResponse*);
    @endcode

  - <icd1:GetTime2> @ref _icd1__GetTime2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__GetTime2(struct soap*, _icd1__GetTime2*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__GetTime2(struct soap*, _icd1__GetTime2*);
    @endcode

  - <icd1:GetTime2Response> @ref _icd1__GetTime2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__GetTime2Response(struct soap*, _icd1__GetTime2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__GetTime2Response(struct soap*, _icd1__GetTime2Response*);
    @endcode

  - <icd1:TestSession> @ref _icd1__TestSession
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__TestSession(struct soap*, _icd1__TestSession*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__TestSession(struct soap*, _icd1__TestSession*);
    @endcode

  - <icd1:TestSessionResponse> @ref _icd1__TestSessionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__TestSessionResponse(struct soap*, _icd1__TestSessionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__TestSessionResponse(struct soap*, _icd1__TestSessionResponse*);
    @endcode

  - <icd1:OutDevice> @ref _icd1__OutDevice
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__OutDevice(struct soap*, _icd1__OutDevice*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__OutDevice(struct soap*, _icd1__OutDevice*);
    @endcode

  - <icd1:OutDeviceResponse> @ref _icd1__OutDeviceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__OutDeviceResponse(struct soap*, _icd1__OutDeviceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__OutDeviceResponse(struct soap*, _icd1__OutDeviceResponse*);
    @endcode

  - <icd1:LoginDevice> @ref _icd1__LoginDevice
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__LoginDevice(struct soap*, _icd1__LoginDevice*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__LoginDevice(struct soap*, _icd1__LoginDevice*);
    @endcode

  - <icd1:LoginDeviceResponse> @ref _icd1__LoginDeviceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__LoginDeviceResponse(struct soap*, _icd1__LoginDeviceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__LoginDeviceResponse(struct soap*, _icd1__LoginDeviceResponse*);
    @endcode

  - <icd1:GetUpdateDataBin> @ref _icd1__GetUpdateDataBin
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__GetUpdateDataBin(struct soap*, _icd1__GetUpdateDataBin*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__GetUpdateDataBin(struct soap*, _icd1__GetUpdateDataBin*);
    @endcode

  - <icd1:GetUpdateDataBinResponse> @ref _icd1__GetUpdateDataBinResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__GetUpdateDataBinResponse(struct soap*, _icd1__GetUpdateDataBinResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__GetUpdateDataBinResponse(struct soap*, _icd1__GetUpdateDataBinResponse*);
    @endcode

  - <icd1:HasUpdateBin> @ref _icd1__HasUpdateBin
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__HasUpdateBin(struct soap*, _icd1__HasUpdateBin*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__HasUpdateBin(struct soap*, _icd1__HasUpdateBin*);
    @endcode

  - <icd1:HasUpdateBinResponse> @ref _icd1__HasUpdateBinResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__HasUpdateBinResponse(struct soap*, _icd1__HasUpdateBinResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__HasUpdateBinResponse(struct soap*, _icd1__HasUpdateBinResponse*);
    @endcode

  - <icd1:SendData> @ref _icd1__SendData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__SendData(struct soap*, _icd1__SendData*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__SendData(struct soap*, _icd1__SendData*);
    @endcode

  - <icd1:SendDataResponse> @ref _icd1__SendDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__icd1__SendDataResponse(struct soap*, _icd1__SendDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__icd1__SendDataResponse(struct soap*, _icd1__SendDataResponse*);
    @endcode

  - <icd1:string> (use wsdl2h option -g to auto-generate)

  - <icd1:int> (use wsdl2h option -g to auto-generate)

*/

/* End of schem.h */
