/* Stub.h
   Generated by gSOAP 2.8.8 from kom.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef Stub_H
#define Stub_H
#include <vector>
#define SOAP_NAMESPACE_OF_icd1	"http://tempuri.org/icdtcpwebservice/icdtcpws"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20808
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__icd1__HelloWorld
#define SOAP_TYPE__icd1__HelloWorld (8)
/* icd1:HelloWorld */
class SOAP_CMAC _icd1__HelloWorld
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE__icd1__HelloWorld */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__HelloWorld() { _icd1__HelloWorld::soap_default(NULL); }
	virtual ~_icd1__HelloWorld() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__icd1__HelloWorldResponse
#define SOAP_TYPE__icd1__HelloWorldResponse (9)
/* icd1:HelloWorldResponse */
class SOAP_CMAC _icd1__HelloWorldResponse
{
public:
	std::string *HelloWorldResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE__icd1__HelloWorldResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__HelloWorldResponse() { _icd1__HelloWorldResponse::soap_default(NULL); }
	virtual ~_icd1__HelloWorldResponse() { }
};
#endif

#ifndef SOAP_TYPE__icd1__GetTime
#define SOAP_TYPE__icd1__GetTime (10)
/* icd1:GetTime */
class SOAP_CMAC _icd1__GetTime
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE__icd1__GetTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__GetTime() { _icd1__GetTime::soap_default(NULL); }
	virtual ~_icd1__GetTime() { }
};
#endif

#ifndef SOAP_TYPE__icd1__GetTimeResponse
#define SOAP_TYPE__icd1__GetTimeResponse (11)
/* icd1:GetTimeResponse */
class SOAP_CMAC _icd1__GetTimeResponse
{
public:
	std::string *GetTimeResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE__icd1__GetTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__GetTimeResponse() { _icd1__GetTimeResponse::soap_default(NULL); }
	virtual ~_icd1__GetTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__icd1__GetTime2
#define SOAP_TYPE__icd1__GetTime2 (12)
/* icd1:GetTime2 */
class SOAP_CMAC _icd1__GetTime2
{
public:
	int l;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE__icd1__GetTime2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__GetTime2() { _icd1__GetTime2::soap_default(NULL); }
	virtual ~_icd1__GetTime2() { }
};
#endif

#ifndef SOAP_TYPE__icd1__GetTime2Response
#define SOAP_TYPE__icd1__GetTime2Response (13)
/* icd1:GetTime2Response */
class SOAP_CMAC _icd1__GetTime2Response
{
public:
	std::string *GetTime2Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__icd1__GetTime2Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__GetTime2Response() { _icd1__GetTime2Response::soap_default(NULL); }
	virtual ~_icd1__GetTime2Response() { }
};
#endif

#ifndef SOAP_TYPE__icd1__TestSession
#define SOAP_TYPE__icd1__TestSession (14)
/* icd1:TestSession */
class SOAP_CMAC _icd1__TestSession
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE__icd1__TestSession */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__TestSession() { _icd1__TestSession::soap_default(NULL); }
	virtual ~_icd1__TestSession() { }
};
#endif

#ifndef SOAP_TYPE__icd1__TestSessionResponse
#define SOAP_TYPE__icd1__TestSessionResponse (15)
/* icd1:TestSessionResponse */
class SOAP_CMAC _icd1__TestSessionResponse
{
public:
	int TestSessionResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__icd1__TestSessionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__TestSessionResponse() { _icd1__TestSessionResponse::soap_default(NULL); }
	virtual ~_icd1__TestSessionResponse() { }
};
#endif

#ifndef SOAP_TYPE__icd1__OutDevice
#define SOAP_TYPE__icd1__OutDevice (16)
/* icd1:OutDevice */
class SOAP_CMAC _icd1__OutDevice
{
public:
	int ErrorNo;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE__icd1__OutDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__OutDevice() { _icd1__OutDevice::soap_default(NULL); }
	virtual ~_icd1__OutDevice() { }
};
#endif

#ifndef SOAP_TYPE__icd1__OutDeviceResponse
#define SOAP_TYPE__icd1__OutDeviceResponse (17)
/* icd1:OutDeviceResponse */
class SOAP_CMAC _icd1__OutDeviceResponse
{
public:
	std::string *OutDeviceResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE__icd1__OutDeviceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__OutDeviceResponse() { _icd1__OutDeviceResponse::soap_default(NULL); }
	virtual ~_icd1__OutDeviceResponse() { }
};
#endif

#ifndef SOAP_TYPE__icd1__LoginDevice
#define SOAP_TYPE__icd1__LoginDevice (18)
/* icd1:LoginDevice */
class SOAP_CMAC _icd1__LoginDevice
{
public:
	int idd;	/* required element of type xsd:int */
	std::string *name;	/* optional element of type xsd:string */
	std::string *DevInfo;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE__icd1__LoginDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__LoginDevice() { _icd1__LoginDevice::soap_default(NULL); }
	virtual ~_icd1__LoginDevice() { }
};
#endif

#ifndef SOAP_TYPE__icd1__LoginDeviceResponse
#define SOAP_TYPE__icd1__LoginDeviceResponse (19)
/* icd1:LoginDeviceResponse */
class SOAP_CMAC _icd1__LoginDeviceResponse
{
public:
	std::string *LoginDeviceResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE__icd1__LoginDeviceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__LoginDeviceResponse() { _icd1__LoginDeviceResponse::soap_default(NULL); }
	virtual ~_icd1__LoginDeviceResponse() { }
};
#endif

#ifndef SOAP_TYPE__icd1__GetUpdateDataBin
#define SOAP_TYPE__icd1__GetUpdateDataBin (20)
/* icd1:GetUpdateDataBin */
class SOAP_CMAC _icd1__GetUpdateDataBin
{
public:
	int nPage;	/* required element of type xsd:int */
	int nSize;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE__icd1__GetUpdateDataBin */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__GetUpdateDataBin() { _icd1__GetUpdateDataBin::soap_default(NULL); }
	virtual ~_icd1__GetUpdateDataBin() { }
};
#endif

#ifndef SOAP_TYPE__icd1__GetUpdateDataBinResponse
#define SOAP_TYPE__icd1__GetUpdateDataBinResponse (21)
/* icd1:GetUpdateDataBinResponse */
class SOAP_CMAC _icd1__GetUpdateDataBinResponse
{
public:
	std::string *GetUpdateDataBinResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE__icd1__GetUpdateDataBinResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__GetUpdateDataBinResponse() { _icd1__GetUpdateDataBinResponse::soap_default(NULL); }
	virtual ~_icd1__GetUpdateDataBinResponse() { }
};
#endif

#ifndef SOAP_TYPE__icd1__HasUpdateBin
#define SOAP_TYPE__icd1__HasUpdateBin (22)
/* icd1:HasUpdateBin */
class SOAP_CMAC _icd1__HasUpdateBin
{
public:
	std::string *DevVer;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE__icd1__HasUpdateBin */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__HasUpdateBin() { _icd1__HasUpdateBin::soap_default(NULL); }
	virtual ~_icd1__HasUpdateBin() { }
};
#endif

#ifndef SOAP_TYPE__icd1__HasUpdateBinResponse
#define SOAP_TYPE__icd1__HasUpdateBinResponse (23)
/* icd1:HasUpdateBinResponse */
class SOAP_CMAC _icd1__HasUpdateBinResponse
{
public:
	std::string *HasUpdateBinResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE__icd1__HasUpdateBinResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__HasUpdateBinResponse() { _icd1__HasUpdateBinResponse::soap_default(NULL); }
	virtual ~_icd1__HasUpdateBinResponse() { }
};
#endif

#ifndef SOAP_TYPE__icd1__SendData
#define SOAP_TYPE__icd1__SendData (24)
/* icd1:SendData */
class SOAP_CMAC _icd1__SendData
{
public:
	std::string *data;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE__icd1__SendData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__SendData() { _icd1__SendData::soap_default(NULL); }
	virtual ~_icd1__SendData() { }
};
#endif

#ifndef SOAP_TYPE__icd1__SendDataResponse
#define SOAP_TYPE__icd1__SendDataResponse (25)
/* icd1:SendDataResponse */
class SOAP_CMAC _icd1__SendDataResponse
{
public:
	std::string *SendDataResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__icd1__SendDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _icd1__SendDataResponse() { _icd1__SendDataResponse::soap_default(NULL); }
	virtual ~_icd1__SendDataResponse() { }
};
#endif

#ifndef SOAP_TYPE___icd2__HelloWorld
#define SOAP_TYPE___icd2__HelloWorld (32)
/* Operation wrapper: */
struct __icd2__HelloWorld
{
public:
	_icd1__HelloWorld *icd1__HelloWorld;	/* optional element of type icd1:HelloWorld */
};
#endif

#ifndef SOAP_TYPE___icd2__GetTime
#define SOAP_TYPE___icd2__GetTime (36)
/* Operation wrapper: */
struct __icd2__GetTime
{
public:
	_icd1__GetTime *icd1__GetTime;	/* optional element of type icd1:GetTime */
};
#endif

#ifndef SOAP_TYPE___icd2__GetTime2
#define SOAP_TYPE___icd2__GetTime2 (40)
/* Operation wrapper: */
struct __icd2__GetTime2
{
public:
	_icd1__GetTime2 *icd1__GetTime2;	/* optional element of type icd1:GetTime2 */
};
#endif

#ifndef SOAP_TYPE___icd2__TestSession
#define SOAP_TYPE___icd2__TestSession (44)
/* Operation wrapper: */
struct __icd2__TestSession
{
public:
	_icd1__TestSession *icd1__TestSession;	/* optional element of type icd1:TestSession */
};
#endif

#ifndef SOAP_TYPE___icd2__OutDevice
#define SOAP_TYPE___icd2__OutDevice (48)
/* Operation wrapper: */
struct __icd2__OutDevice
{
public:
	_icd1__OutDevice *icd1__OutDevice;	/* optional element of type icd1:OutDevice */
};
#endif

#ifndef SOAP_TYPE___icd2__LoginDevice
#define SOAP_TYPE___icd2__LoginDevice (52)
/* Operation wrapper: */
struct __icd2__LoginDevice
{
public:
	_icd1__LoginDevice *icd1__LoginDevice;	/* optional element of type icd1:LoginDevice */
};
#endif

#ifndef SOAP_TYPE___icd2__GetUpdateDataBin
#define SOAP_TYPE___icd2__GetUpdateDataBin (56)
/* Operation wrapper: */
struct __icd2__GetUpdateDataBin
{
public:
	_icd1__GetUpdateDataBin *icd1__GetUpdateDataBin;	/* optional element of type icd1:GetUpdateDataBin */
};
#endif

#ifndef SOAP_TYPE___icd2__HasUpdateBin
#define SOAP_TYPE___icd2__HasUpdateBin (60)
/* Operation wrapper: */
struct __icd2__HasUpdateBin
{
public:
	_icd1__HasUpdateBin *icd1__HasUpdateBin;	/* optional element of type icd1:HasUpdateBin */
};
#endif

#ifndef SOAP_TYPE___icd2__SendData
#define SOAP_TYPE___icd2__SendData (64)
/* Operation wrapper: */
struct __icd2__SendData
{
public:
	_icd1__SendData *icd1__SendData;	/* optional element of type icd1:SendData */
};
#endif

#ifndef SOAP_TYPE___icd3__HelloWorld
#define SOAP_TYPE___icd3__HelloWorld (66)
/* Operation wrapper: */
struct __icd3__HelloWorld
{
public:
	_icd1__HelloWorld *icd1__HelloWorld;	/* optional element of type icd1:HelloWorld */
};
#endif

#ifndef SOAP_TYPE___icd3__GetTime
#define SOAP_TYPE___icd3__GetTime (68)
/* Operation wrapper: */
struct __icd3__GetTime
{
public:
	_icd1__GetTime *icd1__GetTime;	/* optional element of type icd1:GetTime */
};
#endif

#ifndef SOAP_TYPE___icd3__GetTime2
#define SOAP_TYPE___icd3__GetTime2 (70)
/* Operation wrapper: */
struct __icd3__GetTime2
{
public:
	_icd1__GetTime2 *icd1__GetTime2;	/* optional element of type icd1:GetTime2 */
};
#endif

#ifndef SOAP_TYPE___icd3__TestSession
#define SOAP_TYPE___icd3__TestSession (72)
/* Operation wrapper: */
struct __icd3__TestSession
{
public:
	_icd1__TestSession *icd1__TestSession;	/* optional element of type icd1:TestSession */
};
#endif

#ifndef SOAP_TYPE___icd3__OutDevice
#define SOAP_TYPE___icd3__OutDevice (74)
/* Operation wrapper: */
struct __icd3__OutDevice
{
public:
	_icd1__OutDevice *icd1__OutDevice;	/* optional element of type icd1:OutDevice */
};
#endif

#ifndef SOAP_TYPE___icd3__LoginDevice
#define SOAP_TYPE___icd3__LoginDevice (76)
/* Operation wrapper: */
struct __icd3__LoginDevice
{
public:
	_icd1__LoginDevice *icd1__LoginDevice;	/* optional element of type icd1:LoginDevice */
};
#endif

#ifndef SOAP_TYPE___icd3__GetUpdateDataBin
#define SOAP_TYPE___icd3__GetUpdateDataBin (78)
/* Operation wrapper: */
struct __icd3__GetUpdateDataBin
{
public:
	_icd1__GetUpdateDataBin *icd1__GetUpdateDataBin;	/* optional element of type icd1:GetUpdateDataBin */
};
#endif

#ifndef SOAP_TYPE___icd3__HasUpdateBin
#define SOAP_TYPE___icd3__HasUpdateBin (80)
/* Operation wrapper: */
struct __icd3__HasUpdateBin
{
public:
	_icd1__HasUpdateBin *icd1__HasUpdateBin;	/* optional element of type icd1:HasUpdateBin */
};
#endif

#ifndef SOAP_TYPE___icd3__SendData
#define SOAP_TYPE___icd3__SendData (82)
/* Operation wrapper: */
struct __icd3__SendData
{
public:
	_icd1__SendData *icd1__SendData;	/* optional element of type icd1:SendData */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (83)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (84)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (86)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (89)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (90)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of Stub.h */
