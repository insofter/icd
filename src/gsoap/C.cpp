/* C.cpp
   Generated by gSOAP 2.8.8 from schem.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "H.h"

SOAP_SOURCE_STAMP("@(#) C.cpp ver 2.8.8 2012-09-06 12:36:13 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_icd1__LogoutDeviceResponse:
		return soap_in_PointerTo_icd1__LogoutDeviceResponse(soap, NULL, NULL, "icd1:LogoutDeviceResponse");
	case SOAP_TYPE_PointerTo_icd1__LogoutDevice:
		return soap_in_PointerTo_icd1__LogoutDevice(soap, NULL, NULL, "icd1:LogoutDevice");
	case SOAP_TYPE_PointerTo_icd1__SendDataResponse:
		return soap_in_PointerTo_icd1__SendDataResponse(soap, NULL, NULL, "icd1:SendDataResponse");
	case SOAP_TYPE_PointerTo_icd1__SendData:
		return soap_in_PointerTo_icd1__SendData(soap, NULL, NULL, "icd1:SendData");
	case SOAP_TYPE_PointerTo_icd1__LoginDeviceResponse:
		return soap_in_PointerTo_icd1__LoginDeviceResponse(soap, NULL, NULL, "icd1:LoginDeviceResponse");
	case SOAP_TYPE_PointerTo_icd1__LoginDevice:
		return soap_in_PointerTo_icd1__LoginDevice(soap, NULL, NULL, "icd1:LoginDevice");
	case SOAP_TYPE_PointerTo_icd1__GetTimeResponse:
		return soap_in_PointerTo_icd1__GetTimeResponse(soap, NULL, NULL, "icd1:GetTimeResponse");
	case SOAP_TYPE_PointerTo_icd1__GetTime:
		return soap_in_PointerTo_icd1__GetTime(soap, NULL, NULL, "icd1:GetTime");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "icd1:LogoutDeviceResponse"))
		{	*type = SOAP_TYPE__icd1__LogoutDeviceResponse;
			return soap_in__icd1__LogoutDeviceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "icd1:LogoutDevice"))
		{	*type = SOAP_TYPE__icd1__LogoutDevice;
			return soap_in__icd1__LogoutDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "icd1:SendDataResponse"))
		{	*type = SOAP_TYPE__icd1__SendDataResponse;
			return soap_in__icd1__SendDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "icd1:SendData"))
		{	*type = SOAP_TYPE__icd1__SendData;
			return soap_in__icd1__SendData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "icd1:LoginDeviceResponse"))
		{	*type = SOAP_TYPE__icd1__LoginDeviceResponse;
			return soap_in__icd1__LoginDeviceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "icd1:LoginDevice"))
		{	*type = SOAP_TYPE__icd1__LoginDevice;
			return soap_in__icd1__LoginDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "icd1:GetTimeResponse"))
		{	*type = SOAP_TYPE__icd1__GetTimeResponse;
			return soap_in__icd1__GetTimeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "icd1:GetTime"))
		{	*type = SOAP_TYPE__icd1__GetTime;
			return soap_in__icd1__GetTime(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__icd1__LogoutDeviceResponse:
		return ((_icd1__LogoutDeviceResponse *)ptr)->soap_out(soap, "icd1:LogoutDeviceResponse", id, NULL);
	case SOAP_TYPE__icd1__LogoutDevice:
		return ((_icd1__LogoutDevice *)ptr)->soap_out(soap, "icd1:LogoutDevice", id, NULL);
	case SOAP_TYPE__icd1__SendDataResponse:
		return ((_icd1__SendDataResponse *)ptr)->soap_out(soap, "icd1:SendDataResponse", id, NULL);
	case SOAP_TYPE__icd1__SendData:
		return ((_icd1__SendData *)ptr)->soap_out(soap, "icd1:SendData", id, NULL);
	case SOAP_TYPE__icd1__LoginDeviceResponse:
		return ((_icd1__LoginDeviceResponse *)ptr)->soap_out(soap, "icd1:LoginDeviceResponse", id, NULL);
	case SOAP_TYPE__icd1__LoginDevice:
		return ((_icd1__LoginDevice *)ptr)->soap_out(soap, "icd1:LoginDevice", id, NULL);
	case SOAP_TYPE__icd1__GetTimeResponse:
		return ((_icd1__GetTimeResponse *)ptr)->soap_out(soap, "icd1:GetTimeResponse", id, NULL);
	case SOAP_TYPE__icd1__GetTime:
		return ((_icd1__GetTime *)ptr)->soap_out(soap, "icd1:GetTime", id, NULL);
	case SOAP_TYPE_PointerTo_icd1__LogoutDeviceResponse:
		return soap_out_PointerTo_icd1__LogoutDeviceResponse(soap, tag, id, (_icd1__LogoutDeviceResponse *const*)ptr, "icd1:LogoutDeviceResponse");
	case SOAP_TYPE_PointerTo_icd1__LogoutDevice:
		return soap_out_PointerTo_icd1__LogoutDevice(soap, tag, id, (_icd1__LogoutDevice *const*)ptr, "icd1:LogoutDevice");
	case SOAP_TYPE_PointerTo_icd1__SendDataResponse:
		return soap_out_PointerTo_icd1__SendDataResponse(soap, tag, id, (_icd1__SendDataResponse *const*)ptr, "icd1:SendDataResponse");
	case SOAP_TYPE_PointerTo_icd1__SendData:
		return soap_out_PointerTo_icd1__SendData(soap, tag, id, (_icd1__SendData *const*)ptr, "icd1:SendData");
	case SOAP_TYPE_PointerTo_icd1__LoginDeviceResponse:
		return soap_out_PointerTo_icd1__LoginDeviceResponse(soap, tag, id, (_icd1__LoginDeviceResponse *const*)ptr, "icd1:LoginDeviceResponse");
	case SOAP_TYPE_PointerTo_icd1__LoginDevice:
		return soap_out_PointerTo_icd1__LoginDevice(soap, tag, id, (_icd1__LoginDevice *const*)ptr, "icd1:LoginDevice");
	case SOAP_TYPE_PointerTo_icd1__GetTimeResponse:
		return soap_out_PointerTo_icd1__GetTimeResponse(soap, tag, id, (_icd1__GetTimeResponse *const*)ptr, "icd1:GetTimeResponse");
	case SOAP_TYPE_PointerTo_icd1__GetTime:
		return soap_out_PointerTo_icd1__GetTime(soap, tag, id, (_icd1__GetTime *const*)ptr, "icd1:GetTime");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__icd1__LogoutDeviceResponse:
		((_icd1__LogoutDeviceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__icd1__LogoutDevice:
		((_icd1__LogoutDevice *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__icd1__SendDataResponse:
		((_icd1__SendDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__icd1__SendData:
		((_icd1__SendData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__icd1__LoginDeviceResponse:
		((_icd1__LoginDeviceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__icd1__LoginDevice:
		((_icd1__LoginDevice *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__icd1__GetTimeResponse:
		((_icd1__GetTimeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__icd1__GetTime:
		((_icd1__GetTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___icd3__LogoutDevice:
		soap_serialize___icd3__LogoutDevice(soap, (const struct __icd3__LogoutDevice *)ptr);
		break;
	case SOAP_TYPE___icd3__SendData:
		soap_serialize___icd3__SendData(soap, (const struct __icd3__SendData *)ptr);
		break;
	case SOAP_TYPE___icd3__LoginDevice:
		soap_serialize___icd3__LoginDevice(soap, (const struct __icd3__LoginDevice *)ptr);
		break;
	case SOAP_TYPE___icd3__GetTime:
		soap_serialize___icd3__GetTime(soap, (const struct __icd3__GetTime *)ptr);
		break;
	case SOAP_TYPE___icd2__LogoutDevice:
		soap_serialize___icd2__LogoutDevice(soap, (const struct __icd2__LogoutDevice *)ptr);
		break;
	case SOAP_TYPE___icd2__SendData:
		soap_serialize___icd2__SendData(soap, (const struct __icd2__SendData *)ptr);
		break;
	case SOAP_TYPE___icd2__LoginDevice:
		soap_serialize___icd2__LoginDevice(soap, (const struct __icd2__LoginDevice *)ptr);
		break;
	case SOAP_TYPE___icd2__GetTime:
		soap_serialize___icd2__GetTime(soap, (const struct __icd2__GetTime *)ptr);
		break;
	case SOAP_TYPE_PointerTo_icd1__LogoutDeviceResponse:
		soap_serialize_PointerTo_icd1__LogoutDeviceResponse(soap, (_icd1__LogoutDeviceResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_icd1__LogoutDevice:
		soap_serialize_PointerTo_icd1__LogoutDevice(soap, (_icd1__LogoutDevice *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_icd1__SendDataResponse:
		soap_serialize_PointerTo_icd1__SendDataResponse(soap, (_icd1__SendDataResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_icd1__SendData:
		soap_serialize_PointerTo_icd1__SendData(soap, (_icd1__SendData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_icd1__LoginDeviceResponse:
		soap_serialize_PointerTo_icd1__LoginDeviceResponse(soap, (_icd1__LoginDeviceResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_icd1__LoginDevice:
		soap_serialize_PointerTo_icd1__LoginDevice(soap, (_icd1__LoginDevice *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_icd1__GetTimeResponse:
		soap_serialize_PointerTo_icd1__GetTimeResponse(soap, (_icd1__GetTimeResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_icd1__GetTime:
		soap_serialize_PointerTo_icd1__GetTime(soap, (_icd1__GetTime *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 _instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE__icd1__GetTime:
		return (void*)soap_instantiate__icd1__GetTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__icd1__GetTimeResponse:
		return (void*)soap_instantiate__icd1__GetTimeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__icd1__LoginDevice:
		return (void*)soap_instantiate__icd1__LoginDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE__icd1__LoginDeviceResponse:
		return (void*)soap_instantiate__icd1__LoginDeviceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__icd1__SendData:
		return (void*)soap_instantiate__icd1__SendData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__icd1__SendDataResponse:
		return (void*)soap_instantiate__icd1__SendDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__icd1__LogoutDevice:
		return (void*)soap_instantiate__icd1__LogoutDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE__icd1__LogoutDeviceResponse:
		return (void*)soap_instantiate__icd1__LogoutDeviceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___icd2__GetTime:
		return (void*)soap_instantiate___icd2__GetTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE___icd2__LoginDevice:
		return (void*)soap_instantiate___icd2__LoginDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE___icd2__SendData:
		return (void*)soap_instantiate___icd2__SendData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___icd2__LogoutDevice:
		return (void*)soap_instantiate___icd2__LogoutDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE___icd3__GetTime:
		return (void*)soap_instantiate___icd3__GetTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE___icd3__LoginDevice:
		return (void*)soap_instantiate___icd3__LoginDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE___icd3__SendData:
		return (void*)soap_instantiate___icd3__SendData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___icd3__LogoutDevice:
		return (void*)soap_instantiate___icd3__LogoutDevice(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 _fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE__icd1__GetTime:
		if (p->size < 0)
			SOAP_DELETE((_icd1__GetTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_icd1__GetTime*)p->ptr);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE__icd1__GetTimeResponse:
		if (p->size < 0)
			SOAP_DELETE((_icd1__GetTimeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_icd1__GetTimeResponse*)p->ptr);
		break;
	case SOAP_TYPE__icd1__LoginDevice:
		if (p->size < 0)
			SOAP_DELETE((_icd1__LoginDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_icd1__LoginDevice*)p->ptr);
		break;
	case SOAP_TYPE__icd1__LoginDeviceResponse:
		if (p->size < 0)
			SOAP_DELETE((_icd1__LoginDeviceResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_icd1__LoginDeviceResponse*)p->ptr);
		break;
	case SOAP_TYPE__icd1__SendData:
		if (p->size < 0)
			SOAP_DELETE((_icd1__SendData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_icd1__SendData*)p->ptr);
		break;
	case SOAP_TYPE__icd1__SendDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_icd1__SendDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_icd1__SendDataResponse*)p->ptr);
		break;
	case SOAP_TYPE__icd1__LogoutDevice:
		if (p->size < 0)
			SOAP_DELETE((_icd1__LogoutDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_icd1__LogoutDevice*)p->ptr);
		break;
	case SOAP_TYPE__icd1__LogoutDeviceResponse:
		if (p->size < 0)
			SOAP_DELETE((_icd1__LogoutDeviceResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_icd1__LogoutDeviceResponse*)p->ptr);
		break;
	case SOAP_TYPE___icd2__GetTime:
		if (p->size < 0)
			SOAP_DELETE((struct __icd2__GetTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __icd2__GetTime*)p->ptr);
		break;
	case SOAP_TYPE___icd2__LoginDevice:
		if (p->size < 0)
			SOAP_DELETE((struct __icd2__LoginDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __icd2__LoginDevice*)p->ptr);
		break;
	case SOAP_TYPE___icd2__SendData:
		if (p->size < 0)
			SOAP_DELETE((struct __icd2__SendData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __icd2__SendData*)p->ptr);
		break;
	case SOAP_TYPE___icd2__LogoutDevice:
		if (p->size < 0)
			SOAP_DELETE((struct __icd2__LogoutDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __icd2__LogoutDevice*)p->ptr);
		break;
	case SOAP_TYPE___icd3__GetTime:
		if (p->size < 0)
			SOAP_DELETE((struct __icd3__GetTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __icd3__GetTime*)p->ptr);
		break;
	case SOAP_TYPE___icd3__LoginDevice:
		if (p->size < 0)
			SOAP_DELETE((struct __icd3__LoginDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __icd3__LoginDevice*)p->ptr);
		break;
	case SOAP_TYPE___icd3__SendData:
		if (p->size < 0)
			SOAP_DELETE((struct __icd3__SendData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __icd3__SendData*)p->ptr);
		break;
	case SOAP_TYPE___icd3__LogoutDevice:
		if (p->size < 0)
			SOAP_DELETE((struct __icd3__LogoutDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __icd3__LogoutDevice*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, _instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, _container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 _container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _icd1__LogoutDeviceResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_icd1__LogoutDeviceResponse::LogoutDeviceResult);
	this->_icd1__LogoutDeviceResponse::message = NULL;
	/* transient soap skipped */
}

void _icd1__LogoutDeviceResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_icd1__LogoutDeviceResponse::message);
	/* transient soap skipped */
}

int _icd1__LogoutDeviceResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__icd1__LogoutDeviceResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__icd1__LogoutDeviceResponse(struct soap *soap, const char *tag, int id, const _icd1__LogoutDeviceResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__icd1__LogoutDeviceResponse), type))
		return soap->error;
	soap_element_result(soap, "icd1:LogoutDeviceResult");
	if (soap_out_int(soap, "icd1:LogoutDeviceResult", -1, &(a->_icd1__LogoutDeviceResponse::LogoutDeviceResult), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "icd1:message", -1, &(a->_icd1__LogoutDeviceResponse::message), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_icd1__LogoutDeviceResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__icd1__LogoutDeviceResponse(soap, tag, this, type);
}

SOAP_FMAC3 _icd1__LogoutDeviceResponse * SOAP_FMAC4 soap_in__icd1__LogoutDeviceResponse(struct soap *soap, const char *tag, _icd1__LogoutDeviceResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_icd1__LogoutDeviceResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__icd1__LogoutDeviceResponse, sizeof(_icd1__LogoutDeviceResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__icd1__LogoutDeviceResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_icd1__LogoutDeviceResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LogoutDeviceResult1 = 1;
	size_t soap_flag_message1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LogoutDeviceResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "icd1:LogoutDeviceResult", &(a->_icd1__LogoutDeviceResponse::LogoutDeviceResult), "xsd:int"))
				{	soap_flag_LogoutDeviceResult1--;
					continue;
				}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "icd1:message", &(a->_icd1__LogoutDeviceResponse::message), "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "icd1:LogoutDeviceResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_icd1__LogoutDeviceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__icd1__LogoutDeviceResponse, 0, sizeof(_icd1__LogoutDeviceResponse), 0, soap_copy__icd1__LogoutDeviceResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_LogoutDeviceResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _icd1__LogoutDeviceResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__icd1__LogoutDeviceResponse);
	if (this->soap_out(soap, tag?tag:"icd1:LogoutDeviceResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_icd1__LogoutDeviceResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__icd1__LogoutDeviceResponse(soap, this, tag, type);
}

SOAP_FMAC3 _icd1__LogoutDeviceResponse * SOAP_FMAC4 soap_get__icd1__LogoutDeviceResponse(struct soap *soap, _icd1__LogoutDeviceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__icd1__LogoutDeviceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _icd1__LogoutDeviceResponse * SOAP_FMAC2 soap_instantiate__icd1__LogoutDeviceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__icd1__LogoutDeviceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__icd1__LogoutDeviceResponse, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_icd1__LogoutDeviceResponse);
		if (size)
			*size = sizeof(_icd1__LogoutDeviceResponse);
		((_icd1__LogoutDeviceResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_icd1__LogoutDeviceResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_icd1__LogoutDeviceResponse);
		for (int i = 0; i < n; i++)
			((_icd1__LogoutDeviceResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_icd1__LogoutDeviceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__icd1__LogoutDeviceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _icd1__LogoutDeviceResponse %p -> %p\n", q, p));
	*(_icd1__LogoutDeviceResponse*)p = *(_icd1__LogoutDeviceResponse*)q;
}

void _icd1__LogoutDevice::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _icd1__LogoutDevice::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _icd1__LogoutDevice::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__icd1__LogoutDevice(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__icd1__LogoutDevice(struct soap *soap, const char *tag, int id, const _icd1__LogoutDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__icd1__LogoutDevice), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_icd1__LogoutDevice::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__icd1__LogoutDevice(soap, tag, this, type);
}

SOAP_FMAC3 _icd1__LogoutDevice * SOAP_FMAC4 soap_in__icd1__LogoutDevice(struct soap *soap, const char *tag, _icd1__LogoutDevice *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_icd1__LogoutDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__icd1__LogoutDevice, sizeof(_icd1__LogoutDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__icd1__LogoutDevice)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_icd1__LogoutDevice *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_icd1__LogoutDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__icd1__LogoutDevice, 0, sizeof(_icd1__LogoutDevice), 0, soap_copy__icd1__LogoutDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _icd1__LogoutDevice::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__icd1__LogoutDevice);
	if (this->soap_out(soap, tag?tag:"icd1:LogoutDevice", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_icd1__LogoutDevice::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__icd1__LogoutDevice(soap, this, tag, type);
}

SOAP_FMAC3 _icd1__LogoutDevice * SOAP_FMAC4 soap_get__icd1__LogoutDevice(struct soap *soap, _icd1__LogoutDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in__icd1__LogoutDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _icd1__LogoutDevice * SOAP_FMAC2 soap_instantiate__icd1__LogoutDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__icd1__LogoutDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__icd1__LogoutDevice, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_icd1__LogoutDevice);
		if (size)
			*size = sizeof(_icd1__LogoutDevice);
		((_icd1__LogoutDevice*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_icd1__LogoutDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_icd1__LogoutDevice);
		for (int i = 0; i < n; i++)
			((_icd1__LogoutDevice*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_icd1__LogoutDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__icd1__LogoutDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _icd1__LogoutDevice %p -> %p\n", q, p));
	*(_icd1__LogoutDevice*)p = *(_icd1__LogoutDevice*)q;
}

void _icd1__SendDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_icd1__SendDataResponse::SendDataResult);
	this->_icd1__SendDataResponse::message = NULL;
	/* transient soap skipped */
}

void _icd1__SendDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_icd1__SendDataResponse::message);
	/* transient soap skipped */
}

int _icd1__SendDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__icd1__SendDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__icd1__SendDataResponse(struct soap *soap, const char *tag, int id, const _icd1__SendDataResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__icd1__SendDataResponse), type))
		return soap->error;
	soap_element_result(soap, "icd1:SendDataResult");
	if (soap_out_int(soap, "icd1:SendDataResult", -1, &(a->_icd1__SendDataResponse::SendDataResult), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "icd1:message", -1, &(a->_icd1__SendDataResponse::message), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_icd1__SendDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__icd1__SendDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _icd1__SendDataResponse * SOAP_FMAC4 soap_in__icd1__SendDataResponse(struct soap *soap, const char *tag, _icd1__SendDataResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_icd1__SendDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__icd1__SendDataResponse, sizeof(_icd1__SendDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__icd1__SendDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_icd1__SendDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SendDataResult1 = 1;
	size_t soap_flag_message1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SendDataResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "icd1:SendDataResult", &(a->_icd1__SendDataResponse::SendDataResult), "xsd:int"))
				{	soap_flag_SendDataResult1--;
					continue;
				}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "icd1:message", &(a->_icd1__SendDataResponse::message), "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "icd1:SendDataResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_icd1__SendDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__icd1__SendDataResponse, 0, sizeof(_icd1__SendDataResponse), 0, soap_copy__icd1__SendDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SendDataResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _icd1__SendDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__icd1__SendDataResponse);
	if (this->soap_out(soap, tag?tag:"icd1:SendDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_icd1__SendDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__icd1__SendDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _icd1__SendDataResponse * SOAP_FMAC4 soap_get__icd1__SendDataResponse(struct soap *soap, _icd1__SendDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__icd1__SendDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _icd1__SendDataResponse * SOAP_FMAC2 soap_instantiate__icd1__SendDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__icd1__SendDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__icd1__SendDataResponse, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_icd1__SendDataResponse);
		if (size)
			*size = sizeof(_icd1__SendDataResponse);
		((_icd1__SendDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_icd1__SendDataResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_icd1__SendDataResponse);
		for (int i = 0; i < n; i++)
			((_icd1__SendDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_icd1__SendDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__icd1__SendDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _icd1__SendDataResponse %p -> %p\n", q, p));
	*(_icd1__SendDataResponse*)p = *(_icd1__SendDataResponse*)q;
}

void _icd1__SendData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_icd1__SendData::data = NULL;
	/* transient soap skipped */
}

void _icd1__SendData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_icd1__SendData::data);
	/* transient soap skipped */
}

int _icd1__SendData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__icd1__SendData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__icd1__SendData(struct soap *soap, const char *tag, int id, const _icd1__SendData *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__icd1__SendData), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "icd1:data", -1, &(a->_icd1__SendData::data), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_icd1__SendData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__icd1__SendData(soap, tag, this, type);
}

SOAP_FMAC3 _icd1__SendData * SOAP_FMAC4 soap_in__icd1__SendData(struct soap *soap, const char *tag, _icd1__SendData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_icd1__SendData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__icd1__SendData, sizeof(_icd1__SendData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__icd1__SendData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_icd1__SendData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_data1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "icd1:data", &(a->_icd1__SendData::data), "xsd:string"))
				{	soap_flag_data1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_icd1__SendData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__icd1__SendData, 0, sizeof(_icd1__SendData), 0, soap_copy__icd1__SendData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _icd1__SendData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__icd1__SendData);
	if (this->soap_out(soap, tag?tag:"icd1:SendData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_icd1__SendData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__icd1__SendData(soap, this, tag, type);
}

SOAP_FMAC3 _icd1__SendData * SOAP_FMAC4 soap_get__icd1__SendData(struct soap *soap, _icd1__SendData *p, const char *tag, const char *type)
{
	if ((p = soap_in__icd1__SendData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _icd1__SendData * SOAP_FMAC2 soap_instantiate__icd1__SendData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__icd1__SendData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__icd1__SendData, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_icd1__SendData);
		if (size)
			*size = sizeof(_icd1__SendData);
		((_icd1__SendData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_icd1__SendData[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_icd1__SendData);
		for (int i = 0; i < n; i++)
			((_icd1__SendData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_icd1__SendData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__icd1__SendData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _icd1__SendData %p -> %p\n", q, p));
	*(_icd1__SendData*)p = *(_icd1__SendData*)q;
}

void _icd1__LoginDeviceResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_icd1__LoginDeviceResponse::LoginDeviceResult);
	this->_icd1__LoginDeviceResponse::message = NULL;
	/* transient soap skipped */
}

void _icd1__LoginDeviceResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_icd1__LoginDeviceResponse::message);
	/* transient soap skipped */
}

int _icd1__LoginDeviceResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__icd1__LoginDeviceResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__icd1__LoginDeviceResponse(struct soap *soap, const char *tag, int id, const _icd1__LoginDeviceResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__icd1__LoginDeviceResponse), type))
		return soap->error;
	soap_element_result(soap, "icd1:LoginDeviceResult");
	if (soap_out_int(soap, "icd1:LoginDeviceResult", -1, &(a->_icd1__LoginDeviceResponse::LoginDeviceResult), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "icd1:message", -1, &(a->_icd1__LoginDeviceResponse::message), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_icd1__LoginDeviceResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__icd1__LoginDeviceResponse(soap, tag, this, type);
}

SOAP_FMAC3 _icd1__LoginDeviceResponse * SOAP_FMAC4 soap_in__icd1__LoginDeviceResponse(struct soap *soap, const char *tag, _icd1__LoginDeviceResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_icd1__LoginDeviceResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__icd1__LoginDeviceResponse, sizeof(_icd1__LoginDeviceResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__icd1__LoginDeviceResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_icd1__LoginDeviceResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LoginDeviceResult1 = 1;
	size_t soap_flag_message1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LoginDeviceResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "icd1:LoginDeviceResult", &(a->_icd1__LoginDeviceResponse::LoginDeviceResult), "xsd:int"))
				{	soap_flag_LoginDeviceResult1--;
					continue;
				}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "icd1:message", &(a->_icd1__LoginDeviceResponse::message), "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "icd1:LoginDeviceResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_icd1__LoginDeviceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__icd1__LoginDeviceResponse, 0, sizeof(_icd1__LoginDeviceResponse), 0, soap_copy__icd1__LoginDeviceResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_LoginDeviceResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _icd1__LoginDeviceResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__icd1__LoginDeviceResponse);
	if (this->soap_out(soap, tag?tag:"icd1:LoginDeviceResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_icd1__LoginDeviceResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__icd1__LoginDeviceResponse(soap, this, tag, type);
}

SOAP_FMAC3 _icd1__LoginDeviceResponse * SOAP_FMAC4 soap_get__icd1__LoginDeviceResponse(struct soap *soap, _icd1__LoginDeviceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__icd1__LoginDeviceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _icd1__LoginDeviceResponse * SOAP_FMAC2 soap_instantiate__icd1__LoginDeviceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__icd1__LoginDeviceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__icd1__LoginDeviceResponse, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_icd1__LoginDeviceResponse);
		if (size)
			*size = sizeof(_icd1__LoginDeviceResponse);
		((_icd1__LoginDeviceResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_icd1__LoginDeviceResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_icd1__LoginDeviceResponse);
		for (int i = 0; i < n; i++)
			((_icd1__LoginDeviceResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_icd1__LoginDeviceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__icd1__LoginDeviceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _icd1__LoginDeviceResponse %p -> %p\n", q, p));
	*(_icd1__LoginDeviceResponse*)p = *(_icd1__LoginDeviceResponse*)q;
}

void _icd1__LoginDevice::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_icd1__LoginDevice::idd);
	this->_icd1__LoginDevice::name = NULL;
	this->_icd1__LoginDevice::devInfo = NULL;
	/* transient soap skipped */
}

void _icd1__LoginDevice::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_icd1__LoginDevice::name);
	soap_serialize_PointerTostd__string(soap, &this->_icd1__LoginDevice::devInfo);
	/* transient soap skipped */
}

int _icd1__LoginDevice::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__icd1__LoginDevice(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__icd1__LoginDevice(struct soap *soap, const char *tag, int id, const _icd1__LoginDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__icd1__LoginDevice), type))
		return soap->error;
	if (soap_out_int(soap, "icd1:idd", -1, &(a->_icd1__LoginDevice::idd), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "icd1:name", -1, &(a->_icd1__LoginDevice::name), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "icd1:devInfo", -1, &(a->_icd1__LoginDevice::devInfo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_icd1__LoginDevice::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__icd1__LoginDevice(soap, tag, this, type);
}

SOAP_FMAC3 _icd1__LoginDevice * SOAP_FMAC4 soap_in__icd1__LoginDevice(struct soap *soap, const char *tag, _icd1__LoginDevice *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_icd1__LoginDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__icd1__LoginDevice, sizeof(_icd1__LoginDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__icd1__LoginDevice)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_icd1__LoginDevice *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_idd1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_devInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_idd1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "icd1:idd", &(a->_icd1__LoginDevice::idd), "xsd:int"))
				{	soap_flag_idd1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "icd1:name", &(a->_icd1__LoginDevice::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_devInfo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "icd1:devInfo", &(a->_icd1__LoginDevice::devInfo), "xsd:string"))
				{	soap_flag_devInfo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_icd1__LoginDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__icd1__LoginDevice, 0, sizeof(_icd1__LoginDevice), 0, soap_copy__icd1__LoginDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_idd1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _icd1__LoginDevice::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__icd1__LoginDevice);
	if (this->soap_out(soap, tag?tag:"icd1:LoginDevice", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_icd1__LoginDevice::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__icd1__LoginDevice(soap, this, tag, type);
}

SOAP_FMAC3 _icd1__LoginDevice * SOAP_FMAC4 soap_get__icd1__LoginDevice(struct soap *soap, _icd1__LoginDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in__icd1__LoginDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _icd1__LoginDevice * SOAP_FMAC2 soap_instantiate__icd1__LoginDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__icd1__LoginDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__icd1__LoginDevice, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_icd1__LoginDevice);
		if (size)
			*size = sizeof(_icd1__LoginDevice);
		((_icd1__LoginDevice*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_icd1__LoginDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_icd1__LoginDevice);
		for (int i = 0; i < n; i++)
			((_icd1__LoginDevice*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_icd1__LoginDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__icd1__LoginDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _icd1__LoginDevice %p -> %p\n", q, p));
	*(_icd1__LoginDevice*)p = *(_icd1__LoginDevice*)q;
}

void _icd1__GetTimeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_icd1__GetTimeResponse::GetTimeResult = NULL;
	/* transient soap skipped */
}

void _icd1__GetTimeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_icd1__GetTimeResponse::GetTimeResult);
	/* transient soap skipped */
}

int _icd1__GetTimeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__icd1__GetTimeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__icd1__GetTimeResponse(struct soap *soap, const char *tag, int id, const _icd1__GetTimeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__icd1__GetTimeResponse), type))
		return soap->error;
	if (a->GetTimeResult)
		soap_element_result(soap, "icd1:GetTimeResult");
	if (soap_out_PointerTostd__string(soap, "icd1:GetTimeResult", -1, &(a->_icd1__GetTimeResponse::GetTimeResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_icd1__GetTimeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__icd1__GetTimeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _icd1__GetTimeResponse * SOAP_FMAC4 soap_in__icd1__GetTimeResponse(struct soap *soap, const char *tag, _icd1__GetTimeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_icd1__GetTimeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__icd1__GetTimeResponse, sizeof(_icd1__GetTimeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__icd1__GetTimeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_icd1__GetTimeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetTimeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetTimeResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "icd1:GetTimeResult", &(a->_icd1__GetTimeResponse::GetTimeResult), "xsd:string"))
				{	soap_flag_GetTimeResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "icd1:GetTimeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_icd1__GetTimeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__icd1__GetTimeResponse, 0, sizeof(_icd1__GetTimeResponse), 0, soap_copy__icd1__GetTimeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _icd1__GetTimeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__icd1__GetTimeResponse);
	if (this->soap_out(soap, tag?tag:"icd1:GetTimeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_icd1__GetTimeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__icd1__GetTimeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _icd1__GetTimeResponse * SOAP_FMAC4 soap_get__icd1__GetTimeResponse(struct soap *soap, _icd1__GetTimeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__icd1__GetTimeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _icd1__GetTimeResponse * SOAP_FMAC2 soap_instantiate__icd1__GetTimeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__icd1__GetTimeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__icd1__GetTimeResponse, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_icd1__GetTimeResponse);
		if (size)
			*size = sizeof(_icd1__GetTimeResponse);
		((_icd1__GetTimeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_icd1__GetTimeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_icd1__GetTimeResponse);
		for (int i = 0; i < n; i++)
			((_icd1__GetTimeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_icd1__GetTimeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__icd1__GetTimeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _icd1__GetTimeResponse %p -> %p\n", q, p));
	*(_icd1__GetTimeResponse*)p = *(_icd1__GetTimeResponse*)q;
}

void _icd1__GetTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _icd1__GetTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _icd1__GetTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__icd1__GetTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__icd1__GetTime(struct soap *soap, const char *tag, int id, const _icd1__GetTime *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__icd1__GetTime), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_icd1__GetTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__icd1__GetTime(soap, tag, this, type);
}

SOAP_FMAC3 _icd1__GetTime * SOAP_FMAC4 soap_in__icd1__GetTime(struct soap *soap, const char *tag, _icd1__GetTime *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_icd1__GetTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__icd1__GetTime, sizeof(_icd1__GetTime), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__icd1__GetTime)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_icd1__GetTime *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_icd1__GetTime *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__icd1__GetTime, 0, sizeof(_icd1__GetTime), 0, soap_copy__icd1__GetTime);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _icd1__GetTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__icd1__GetTime);
	if (this->soap_out(soap, tag?tag:"icd1:GetTime", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_icd1__GetTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__icd1__GetTime(soap, this, tag, type);
}

SOAP_FMAC3 _icd1__GetTime * SOAP_FMAC4 soap_get__icd1__GetTime(struct soap *soap, _icd1__GetTime *p, const char *tag, const char *type)
{
	if ((p = soap_in__icd1__GetTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _icd1__GetTime * SOAP_FMAC2 soap_instantiate__icd1__GetTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__icd1__GetTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__icd1__GetTime, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_icd1__GetTime);
		if (size)
			*size = sizeof(_icd1__GetTime);
		((_icd1__GetTime*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_icd1__GetTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_icd1__GetTime);
		for (int i = 0; i < n; i++)
			((_icd1__GetTime*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_icd1__GetTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__icd1__GetTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _icd1__GetTime %p -> %p\n", q, p));
	*(_icd1__GetTime*)p = *(_icd1__GetTime*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___icd3__LogoutDevice(struct soap *soap, struct __icd3__LogoutDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->icd1__LogoutDevice = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___icd3__LogoutDevice(struct soap *soap, const struct __icd3__LogoutDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_icd1__LogoutDevice(soap, &a->icd1__LogoutDevice);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___icd3__LogoutDevice(struct soap *soap, const char *tag, int id, const struct __icd3__LogoutDevice *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_icd1__LogoutDevice(soap, "icd1:LogoutDevice", -1, &a->icd1__LogoutDevice, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd3__LogoutDevice * SOAP_FMAC4 soap_in___icd3__LogoutDevice(struct soap *soap, const char *tag, struct __icd3__LogoutDevice *a, const char *type)
{
	size_t soap_flag_icd1__LogoutDevice = 1;
	short soap_flag;
	a = (struct __icd3__LogoutDevice *)soap_id_enter(soap, "", a, SOAP_TYPE___icd3__LogoutDevice, sizeof(struct __icd3__LogoutDevice), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___icd3__LogoutDevice(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_icd1__LogoutDevice && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_icd1__LogoutDevice(soap, "icd1:LogoutDevice", &a->icd1__LogoutDevice, ""))
				{	soap_flag_icd1__LogoutDevice--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___icd3__LogoutDevice(struct soap *soap, const struct __icd3__LogoutDevice *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___icd3__LogoutDevice(soap, tag?tag:"-icd3:LogoutDevice", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd3__LogoutDevice * SOAP_FMAC4 soap_get___icd3__LogoutDevice(struct soap *soap, struct __icd3__LogoutDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in___icd3__LogoutDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __icd3__LogoutDevice * SOAP_FMAC2 soap_instantiate___icd3__LogoutDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___icd3__LogoutDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___icd3__LogoutDevice, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __icd3__LogoutDevice);
		if (size)
			*size = sizeof(struct __icd3__LogoutDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __icd3__LogoutDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __icd3__LogoutDevice);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __icd3__LogoutDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___icd3__LogoutDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __icd3__LogoutDevice %p -> %p\n", q, p));
	*(struct __icd3__LogoutDevice*)p = *(struct __icd3__LogoutDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___icd3__SendData(struct soap *soap, struct __icd3__SendData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->icd1__SendData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___icd3__SendData(struct soap *soap, const struct __icd3__SendData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_icd1__SendData(soap, &a->icd1__SendData);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___icd3__SendData(struct soap *soap, const char *tag, int id, const struct __icd3__SendData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_icd1__SendData(soap, "icd1:SendData", -1, &a->icd1__SendData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd3__SendData * SOAP_FMAC4 soap_in___icd3__SendData(struct soap *soap, const char *tag, struct __icd3__SendData *a, const char *type)
{
	size_t soap_flag_icd1__SendData = 1;
	short soap_flag;
	a = (struct __icd3__SendData *)soap_id_enter(soap, "", a, SOAP_TYPE___icd3__SendData, sizeof(struct __icd3__SendData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___icd3__SendData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_icd1__SendData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_icd1__SendData(soap, "icd1:SendData", &a->icd1__SendData, ""))
				{	soap_flag_icd1__SendData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___icd3__SendData(struct soap *soap, const struct __icd3__SendData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___icd3__SendData(soap, tag?tag:"-icd3:SendData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd3__SendData * SOAP_FMAC4 soap_get___icd3__SendData(struct soap *soap, struct __icd3__SendData *p, const char *tag, const char *type)
{
	if ((p = soap_in___icd3__SendData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __icd3__SendData * SOAP_FMAC2 soap_instantiate___icd3__SendData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___icd3__SendData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___icd3__SendData, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __icd3__SendData);
		if (size)
			*size = sizeof(struct __icd3__SendData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __icd3__SendData[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __icd3__SendData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __icd3__SendData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___icd3__SendData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __icd3__SendData %p -> %p\n", q, p));
	*(struct __icd3__SendData*)p = *(struct __icd3__SendData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___icd3__LoginDevice(struct soap *soap, struct __icd3__LoginDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->icd1__LoginDevice = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___icd3__LoginDevice(struct soap *soap, const struct __icd3__LoginDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_icd1__LoginDevice(soap, &a->icd1__LoginDevice);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___icd3__LoginDevice(struct soap *soap, const char *tag, int id, const struct __icd3__LoginDevice *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_icd1__LoginDevice(soap, "icd1:LoginDevice", -1, &a->icd1__LoginDevice, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd3__LoginDevice * SOAP_FMAC4 soap_in___icd3__LoginDevice(struct soap *soap, const char *tag, struct __icd3__LoginDevice *a, const char *type)
{
	size_t soap_flag_icd1__LoginDevice = 1;
	short soap_flag;
	a = (struct __icd3__LoginDevice *)soap_id_enter(soap, "", a, SOAP_TYPE___icd3__LoginDevice, sizeof(struct __icd3__LoginDevice), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___icd3__LoginDevice(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_icd1__LoginDevice && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_icd1__LoginDevice(soap, "icd1:LoginDevice", &a->icd1__LoginDevice, ""))
				{	soap_flag_icd1__LoginDevice--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___icd3__LoginDevice(struct soap *soap, const struct __icd3__LoginDevice *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___icd3__LoginDevice(soap, tag?tag:"-icd3:LoginDevice", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd3__LoginDevice * SOAP_FMAC4 soap_get___icd3__LoginDevice(struct soap *soap, struct __icd3__LoginDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in___icd3__LoginDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __icd3__LoginDevice * SOAP_FMAC2 soap_instantiate___icd3__LoginDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___icd3__LoginDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___icd3__LoginDevice, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __icd3__LoginDevice);
		if (size)
			*size = sizeof(struct __icd3__LoginDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __icd3__LoginDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __icd3__LoginDevice);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __icd3__LoginDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___icd3__LoginDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __icd3__LoginDevice %p -> %p\n", q, p));
	*(struct __icd3__LoginDevice*)p = *(struct __icd3__LoginDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___icd3__GetTime(struct soap *soap, struct __icd3__GetTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->icd1__GetTime = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___icd3__GetTime(struct soap *soap, const struct __icd3__GetTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_icd1__GetTime(soap, &a->icd1__GetTime);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___icd3__GetTime(struct soap *soap, const char *tag, int id, const struct __icd3__GetTime *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_icd1__GetTime(soap, "icd1:GetTime", -1, &a->icd1__GetTime, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd3__GetTime * SOAP_FMAC4 soap_in___icd3__GetTime(struct soap *soap, const char *tag, struct __icd3__GetTime *a, const char *type)
{
	size_t soap_flag_icd1__GetTime = 1;
	short soap_flag;
	a = (struct __icd3__GetTime *)soap_id_enter(soap, "", a, SOAP_TYPE___icd3__GetTime, sizeof(struct __icd3__GetTime), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___icd3__GetTime(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_icd1__GetTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_icd1__GetTime(soap, "icd1:GetTime", &a->icd1__GetTime, ""))
				{	soap_flag_icd1__GetTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___icd3__GetTime(struct soap *soap, const struct __icd3__GetTime *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___icd3__GetTime(soap, tag?tag:"-icd3:GetTime", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd3__GetTime * SOAP_FMAC4 soap_get___icd3__GetTime(struct soap *soap, struct __icd3__GetTime *p, const char *tag, const char *type)
{
	if ((p = soap_in___icd3__GetTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __icd3__GetTime * SOAP_FMAC2 soap_instantiate___icd3__GetTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___icd3__GetTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___icd3__GetTime, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __icd3__GetTime);
		if (size)
			*size = sizeof(struct __icd3__GetTime);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __icd3__GetTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __icd3__GetTime);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __icd3__GetTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___icd3__GetTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __icd3__GetTime %p -> %p\n", q, p));
	*(struct __icd3__GetTime*)p = *(struct __icd3__GetTime*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___icd2__LogoutDevice(struct soap *soap, struct __icd2__LogoutDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->icd1__LogoutDevice = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___icd2__LogoutDevice(struct soap *soap, const struct __icd2__LogoutDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_icd1__LogoutDevice(soap, &a->icd1__LogoutDevice);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___icd2__LogoutDevice(struct soap *soap, const char *tag, int id, const struct __icd2__LogoutDevice *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_icd1__LogoutDevice(soap, "icd1:LogoutDevice", -1, &a->icd1__LogoutDevice, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd2__LogoutDevice * SOAP_FMAC4 soap_in___icd2__LogoutDevice(struct soap *soap, const char *tag, struct __icd2__LogoutDevice *a, const char *type)
{
	size_t soap_flag_icd1__LogoutDevice = 1;
	short soap_flag;
	a = (struct __icd2__LogoutDevice *)soap_id_enter(soap, "", a, SOAP_TYPE___icd2__LogoutDevice, sizeof(struct __icd2__LogoutDevice), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___icd2__LogoutDevice(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_icd1__LogoutDevice && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_icd1__LogoutDevice(soap, "icd1:LogoutDevice", &a->icd1__LogoutDevice, ""))
				{	soap_flag_icd1__LogoutDevice--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___icd2__LogoutDevice(struct soap *soap, const struct __icd2__LogoutDevice *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___icd2__LogoutDevice(soap, tag?tag:"-icd2:LogoutDevice", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd2__LogoutDevice * SOAP_FMAC4 soap_get___icd2__LogoutDevice(struct soap *soap, struct __icd2__LogoutDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in___icd2__LogoutDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __icd2__LogoutDevice * SOAP_FMAC2 soap_instantiate___icd2__LogoutDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___icd2__LogoutDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___icd2__LogoutDevice, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __icd2__LogoutDevice);
		if (size)
			*size = sizeof(struct __icd2__LogoutDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __icd2__LogoutDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __icd2__LogoutDevice);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __icd2__LogoutDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___icd2__LogoutDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __icd2__LogoutDevice %p -> %p\n", q, p));
	*(struct __icd2__LogoutDevice*)p = *(struct __icd2__LogoutDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___icd2__SendData(struct soap *soap, struct __icd2__SendData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->icd1__SendData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___icd2__SendData(struct soap *soap, const struct __icd2__SendData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_icd1__SendData(soap, &a->icd1__SendData);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___icd2__SendData(struct soap *soap, const char *tag, int id, const struct __icd2__SendData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_icd1__SendData(soap, "icd1:SendData", -1, &a->icd1__SendData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd2__SendData * SOAP_FMAC4 soap_in___icd2__SendData(struct soap *soap, const char *tag, struct __icd2__SendData *a, const char *type)
{
	size_t soap_flag_icd1__SendData = 1;
	short soap_flag;
	a = (struct __icd2__SendData *)soap_id_enter(soap, "", a, SOAP_TYPE___icd2__SendData, sizeof(struct __icd2__SendData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___icd2__SendData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_icd1__SendData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_icd1__SendData(soap, "icd1:SendData", &a->icd1__SendData, ""))
				{	soap_flag_icd1__SendData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___icd2__SendData(struct soap *soap, const struct __icd2__SendData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___icd2__SendData(soap, tag?tag:"-icd2:SendData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd2__SendData * SOAP_FMAC4 soap_get___icd2__SendData(struct soap *soap, struct __icd2__SendData *p, const char *tag, const char *type)
{
	if ((p = soap_in___icd2__SendData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __icd2__SendData * SOAP_FMAC2 soap_instantiate___icd2__SendData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___icd2__SendData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___icd2__SendData, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __icd2__SendData);
		if (size)
			*size = sizeof(struct __icd2__SendData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __icd2__SendData[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __icd2__SendData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __icd2__SendData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___icd2__SendData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __icd2__SendData %p -> %p\n", q, p));
	*(struct __icd2__SendData*)p = *(struct __icd2__SendData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___icd2__LoginDevice(struct soap *soap, struct __icd2__LoginDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->icd1__LoginDevice = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___icd2__LoginDevice(struct soap *soap, const struct __icd2__LoginDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_icd1__LoginDevice(soap, &a->icd1__LoginDevice);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___icd2__LoginDevice(struct soap *soap, const char *tag, int id, const struct __icd2__LoginDevice *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_icd1__LoginDevice(soap, "icd1:LoginDevice", -1, &a->icd1__LoginDevice, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd2__LoginDevice * SOAP_FMAC4 soap_in___icd2__LoginDevice(struct soap *soap, const char *tag, struct __icd2__LoginDevice *a, const char *type)
{
	size_t soap_flag_icd1__LoginDevice = 1;
	short soap_flag;
	a = (struct __icd2__LoginDevice *)soap_id_enter(soap, "", a, SOAP_TYPE___icd2__LoginDevice, sizeof(struct __icd2__LoginDevice), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___icd2__LoginDevice(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_icd1__LoginDevice && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_icd1__LoginDevice(soap, "icd1:LoginDevice", &a->icd1__LoginDevice, ""))
				{	soap_flag_icd1__LoginDevice--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___icd2__LoginDevice(struct soap *soap, const struct __icd2__LoginDevice *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___icd2__LoginDevice(soap, tag?tag:"-icd2:LoginDevice", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd2__LoginDevice * SOAP_FMAC4 soap_get___icd2__LoginDevice(struct soap *soap, struct __icd2__LoginDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in___icd2__LoginDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __icd2__LoginDevice * SOAP_FMAC2 soap_instantiate___icd2__LoginDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___icd2__LoginDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___icd2__LoginDevice, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __icd2__LoginDevice);
		if (size)
			*size = sizeof(struct __icd2__LoginDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __icd2__LoginDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __icd2__LoginDevice);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __icd2__LoginDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___icd2__LoginDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __icd2__LoginDevice %p -> %p\n", q, p));
	*(struct __icd2__LoginDevice*)p = *(struct __icd2__LoginDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___icd2__GetTime(struct soap *soap, struct __icd2__GetTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->icd1__GetTime = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___icd2__GetTime(struct soap *soap, const struct __icd2__GetTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_icd1__GetTime(soap, &a->icd1__GetTime);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___icd2__GetTime(struct soap *soap, const char *tag, int id, const struct __icd2__GetTime *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_icd1__GetTime(soap, "icd1:GetTime", -1, &a->icd1__GetTime, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd2__GetTime * SOAP_FMAC4 soap_in___icd2__GetTime(struct soap *soap, const char *tag, struct __icd2__GetTime *a, const char *type)
{
	size_t soap_flag_icd1__GetTime = 1;
	short soap_flag;
	a = (struct __icd2__GetTime *)soap_id_enter(soap, "", a, SOAP_TYPE___icd2__GetTime, sizeof(struct __icd2__GetTime), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___icd2__GetTime(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_icd1__GetTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_icd1__GetTime(soap, "icd1:GetTime", &a->icd1__GetTime, ""))
				{	soap_flag_icd1__GetTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___icd2__GetTime(struct soap *soap, const struct __icd2__GetTime *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___icd2__GetTime(soap, tag?tag:"-icd2:GetTime", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __icd2__GetTime * SOAP_FMAC4 soap_get___icd2__GetTime(struct soap *soap, struct __icd2__GetTime *p, const char *tag, const char *type)
{
	if ((p = soap_in___icd2__GetTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __icd2__GetTime * SOAP_FMAC2 soap_instantiate___icd2__GetTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___icd2__GetTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___icd2__GetTime, n, _fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __icd2__GetTime);
		if (size)
			*size = sizeof(struct __icd2__GetTime);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __icd2__GetTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __icd2__GetTime);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __icd2__GetTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___icd2__GetTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __icd2__GetTime %p -> %p\n", q, p));
	*(struct __icd2__GetTime*)p = *(struct __icd2__GetTime*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icd1__LogoutDeviceResponse(struct soap *soap, _icd1__LogoutDeviceResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__icd1__LogoutDeviceResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icd1__LogoutDeviceResponse(struct soap *soap, const char *tag, int id, _icd1__LogoutDeviceResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__icd1__LogoutDeviceResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _icd1__LogoutDeviceResponse ** SOAP_FMAC4 soap_in_PointerTo_icd1__LogoutDeviceResponse(struct soap *soap, const char *tag, _icd1__LogoutDeviceResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_icd1__LogoutDeviceResponse **)soap_malloc(soap, sizeof(_icd1__LogoutDeviceResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_icd1__LogoutDeviceResponse *)soap_instantiate__icd1__LogoutDeviceResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_icd1__LogoutDeviceResponse ** p = (_icd1__LogoutDeviceResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__icd1__LogoutDeviceResponse, sizeof(_icd1__LogoutDeviceResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icd1__LogoutDeviceResponse(struct soap *soap, _icd1__LogoutDeviceResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_icd1__LogoutDeviceResponse);
	if (soap_out_PointerTo_icd1__LogoutDeviceResponse(soap, tag?tag:"icd1:LogoutDeviceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _icd1__LogoutDeviceResponse ** SOAP_FMAC4 soap_get_PointerTo_icd1__LogoutDeviceResponse(struct soap *soap, _icd1__LogoutDeviceResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_icd1__LogoutDeviceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icd1__LogoutDevice(struct soap *soap, _icd1__LogoutDevice *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__icd1__LogoutDevice))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icd1__LogoutDevice(struct soap *soap, const char *tag, int id, _icd1__LogoutDevice *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__icd1__LogoutDevice);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _icd1__LogoutDevice ** SOAP_FMAC4 soap_in_PointerTo_icd1__LogoutDevice(struct soap *soap, const char *tag, _icd1__LogoutDevice **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_icd1__LogoutDevice **)soap_malloc(soap, sizeof(_icd1__LogoutDevice *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_icd1__LogoutDevice *)soap_instantiate__icd1__LogoutDevice(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_icd1__LogoutDevice ** p = (_icd1__LogoutDevice **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__icd1__LogoutDevice, sizeof(_icd1__LogoutDevice), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icd1__LogoutDevice(struct soap *soap, _icd1__LogoutDevice *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_icd1__LogoutDevice);
	if (soap_out_PointerTo_icd1__LogoutDevice(soap, tag?tag:"icd1:LogoutDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _icd1__LogoutDevice ** SOAP_FMAC4 soap_get_PointerTo_icd1__LogoutDevice(struct soap *soap, _icd1__LogoutDevice **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_icd1__LogoutDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icd1__SendDataResponse(struct soap *soap, _icd1__SendDataResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__icd1__SendDataResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icd1__SendDataResponse(struct soap *soap, const char *tag, int id, _icd1__SendDataResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__icd1__SendDataResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _icd1__SendDataResponse ** SOAP_FMAC4 soap_in_PointerTo_icd1__SendDataResponse(struct soap *soap, const char *tag, _icd1__SendDataResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_icd1__SendDataResponse **)soap_malloc(soap, sizeof(_icd1__SendDataResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_icd1__SendDataResponse *)soap_instantiate__icd1__SendDataResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_icd1__SendDataResponse ** p = (_icd1__SendDataResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__icd1__SendDataResponse, sizeof(_icd1__SendDataResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icd1__SendDataResponse(struct soap *soap, _icd1__SendDataResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_icd1__SendDataResponse);
	if (soap_out_PointerTo_icd1__SendDataResponse(soap, tag?tag:"icd1:SendDataResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _icd1__SendDataResponse ** SOAP_FMAC4 soap_get_PointerTo_icd1__SendDataResponse(struct soap *soap, _icd1__SendDataResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_icd1__SendDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icd1__SendData(struct soap *soap, _icd1__SendData *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__icd1__SendData))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icd1__SendData(struct soap *soap, const char *tag, int id, _icd1__SendData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__icd1__SendData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _icd1__SendData ** SOAP_FMAC4 soap_in_PointerTo_icd1__SendData(struct soap *soap, const char *tag, _icd1__SendData **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_icd1__SendData **)soap_malloc(soap, sizeof(_icd1__SendData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_icd1__SendData *)soap_instantiate__icd1__SendData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_icd1__SendData ** p = (_icd1__SendData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__icd1__SendData, sizeof(_icd1__SendData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icd1__SendData(struct soap *soap, _icd1__SendData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_icd1__SendData);
	if (soap_out_PointerTo_icd1__SendData(soap, tag?tag:"icd1:SendData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _icd1__SendData ** SOAP_FMAC4 soap_get_PointerTo_icd1__SendData(struct soap *soap, _icd1__SendData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_icd1__SendData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icd1__LoginDeviceResponse(struct soap *soap, _icd1__LoginDeviceResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__icd1__LoginDeviceResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icd1__LoginDeviceResponse(struct soap *soap, const char *tag, int id, _icd1__LoginDeviceResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__icd1__LoginDeviceResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _icd1__LoginDeviceResponse ** SOAP_FMAC4 soap_in_PointerTo_icd1__LoginDeviceResponse(struct soap *soap, const char *tag, _icd1__LoginDeviceResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_icd1__LoginDeviceResponse **)soap_malloc(soap, sizeof(_icd1__LoginDeviceResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_icd1__LoginDeviceResponse *)soap_instantiate__icd1__LoginDeviceResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_icd1__LoginDeviceResponse ** p = (_icd1__LoginDeviceResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__icd1__LoginDeviceResponse, sizeof(_icd1__LoginDeviceResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icd1__LoginDeviceResponse(struct soap *soap, _icd1__LoginDeviceResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_icd1__LoginDeviceResponse);
	if (soap_out_PointerTo_icd1__LoginDeviceResponse(soap, tag?tag:"icd1:LoginDeviceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _icd1__LoginDeviceResponse ** SOAP_FMAC4 soap_get_PointerTo_icd1__LoginDeviceResponse(struct soap *soap, _icd1__LoginDeviceResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_icd1__LoginDeviceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icd1__LoginDevice(struct soap *soap, _icd1__LoginDevice *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__icd1__LoginDevice))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icd1__LoginDevice(struct soap *soap, const char *tag, int id, _icd1__LoginDevice *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__icd1__LoginDevice);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _icd1__LoginDevice ** SOAP_FMAC4 soap_in_PointerTo_icd1__LoginDevice(struct soap *soap, const char *tag, _icd1__LoginDevice **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_icd1__LoginDevice **)soap_malloc(soap, sizeof(_icd1__LoginDevice *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_icd1__LoginDevice *)soap_instantiate__icd1__LoginDevice(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_icd1__LoginDevice ** p = (_icd1__LoginDevice **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__icd1__LoginDevice, sizeof(_icd1__LoginDevice), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icd1__LoginDevice(struct soap *soap, _icd1__LoginDevice *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_icd1__LoginDevice);
	if (soap_out_PointerTo_icd1__LoginDevice(soap, tag?tag:"icd1:LoginDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _icd1__LoginDevice ** SOAP_FMAC4 soap_get_PointerTo_icd1__LoginDevice(struct soap *soap, _icd1__LoginDevice **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_icd1__LoginDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icd1__GetTimeResponse(struct soap *soap, _icd1__GetTimeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__icd1__GetTimeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icd1__GetTimeResponse(struct soap *soap, const char *tag, int id, _icd1__GetTimeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__icd1__GetTimeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _icd1__GetTimeResponse ** SOAP_FMAC4 soap_in_PointerTo_icd1__GetTimeResponse(struct soap *soap, const char *tag, _icd1__GetTimeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_icd1__GetTimeResponse **)soap_malloc(soap, sizeof(_icd1__GetTimeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_icd1__GetTimeResponse *)soap_instantiate__icd1__GetTimeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_icd1__GetTimeResponse ** p = (_icd1__GetTimeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__icd1__GetTimeResponse, sizeof(_icd1__GetTimeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icd1__GetTimeResponse(struct soap *soap, _icd1__GetTimeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_icd1__GetTimeResponse);
	if (soap_out_PointerTo_icd1__GetTimeResponse(soap, tag?tag:"icd1:GetTimeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _icd1__GetTimeResponse ** SOAP_FMAC4 soap_get_PointerTo_icd1__GetTimeResponse(struct soap *soap, _icd1__GetTimeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_icd1__GetTimeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icd1__GetTime(struct soap *soap, _icd1__GetTime *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__icd1__GetTime))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icd1__GetTime(struct soap *soap, const char *tag, int id, _icd1__GetTime *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__icd1__GetTime);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _icd1__GetTime ** SOAP_FMAC4 soap_in_PointerTo_icd1__GetTime(struct soap *soap, const char *tag, _icd1__GetTime **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_icd1__GetTime **)soap_malloc(soap, sizeof(_icd1__GetTime *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_icd1__GetTime *)soap_instantiate__icd1__GetTime(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_icd1__GetTime ** p = (_icd1__GetTime **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__icd1__GetTime, sizeof(_icd1__GetTime), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icd1__GetTime(struct soap *soap, _icd1__GetTime *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_icd1__GetTime);
	if (soap_out_PointerTo_icd1__GetTime(soap, tag?tag:"icd1:GetTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _icd1__GetTime ** SOAP_FMAC4 soap_get_PointerTo_icd1__GetTime(struct soap *soap, _icd1__GetTime **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_icd1__GetTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of C.cpp */
