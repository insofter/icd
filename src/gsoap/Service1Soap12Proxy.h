/* Service1Soap12Proxy.h
   Generated by gSOAP 2.8.8 from schem.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef Service1Soap12Proxy_H
#define Service1Soap12Proxy_H
#include "H.h"

class SOAP_CMAC Service1Soap12Proxy : public soap
{ public:
	/// Endpoint URL of service 'Service1Soap12Proxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	Service1Soap12Proxy();
	/// Construct from another engine state
	Service1Soap12Proxy(const struct soap&);
	/// Constructor with endpoint URL
	Service1Soap12Proxy(const char *url);
	/// Constructor with engine input+output mode control
	Service1Soap12Proxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	Service1Soap12Proxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	Service1Soap12Proxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~Service1Soap12Proxy();
	/// Initializer used by constructors
	virtual	void Service1Soap12Proxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'HelloWorld' (returns error code or SOAP_OK)
	virtual	int HelloWorld(_icd1__HelloWorld *icd1__HelloWorld, _icd1__HelloWorldResponse *icd1__HelloWorldResponse) { return HelloWorld(NULL, NULL, icd1__HelloWorld, icd1__HelloWorldResponse); }
	virtual	int HelloWorld(const char *endpoint, const char *soap_action, _icd1__HelloWorld *icd1__HelloWorld, _icd1__HelloWorldResponse *icd1__HelloWorldResponse);

	/// Web service operation 'GetTime' (returns error code or SOAP_OK)
	virtual	int GetTime(_icd1__GetTime *icd1__GetTime, _icd1__GetTimeResponse *icd1__GetTimeResponse) { return GetTime(NULL, NULL, icd1__GetTime, icd1__GetTimeResponse); }
	virtual	int GetTime(const char *endpoint, const char *soap_action, _icd1__GetTime *icd1__GetTime, _icd1__GetTimeResponse *icd1__GetTimeResponse);

	/// Web service operation 'GetTime2' (returns error code or SOAP_OK)
	virtual	int GetTime2(_icd1__GetTime2 *icd1__GetTime2, _icd1__GetTime2Response *icd1__GetTime2Response) { return GetTime2(NULL, NULL, icd1__GetTime2, icd1__GetTime2Response); }
	virtual	int GetTime2(const char *endpoint, const char *soap_action, _icd1__GetTime2 *icd1__GetTime2, _icd1__GetTime2Response *icd1__GetTime2Response);

	/// Web service operation 'TestSession' (returns error code or SOAP_OK)
	virtual	int TestSession(_icd1__TestSession *icd1__TestSession, _icd1__TestSessionResponse *icd1__TestSessionResponse) { return TestSession(NULL, NULL, icd1__TestSession, icd1__TestSessionResponse); }
	virtual	int TestSession(const char *endpoint, const char *soap_action, _icd1__TestSession *icd1__TestSession, _icd1__TestSessionResponse *icd1__TestSessionResponse);

	/// Web service operation 'OutDevice' (returns error code or SOAP_OK)
	virtual	int OutDevice(_icd1__OutDevice *icd1__OutDevice, _icd1__OutDeviceResponse *icd1__OutDeviceResponse) { return OutDevice(NULL, NULL, icd1__OutDevice, icd1__OutDeviceResponse); }
	virtual	int OutDevice(const char *endpoint, const char *soap_action, _icd1__OutDevice *icd1__OutDevice, _icd1__OutDeviceResponse *icd1__OutDeviceResponse);

	/// Web service operation 'LoginDevice' (returns error code or SOAP_OK)
	virtual	int LoginDevice(_icd1__LoginDevice *icd1__LoginDevice, _icd1__LoginDeviceResponse *icd1__LoginDeviceResponse) { return LoginDevice(NULL, NULL, icd1__LoginDevice, icd1__LoginDeviceResponse); }
	virtual	int LoginDevice(const char *endpoint, const char *soap_action, _icd1__LoginDevice *icd1__LoginDevice, _icd1__LoginDeviceResponse *icd1__LoginDeviceResponse);

	/// Web service operation 'GetUpdateDataBin' (returns error code or SOAP_OK)
	virtual	int GetUpdateDataBin(_icd1__GetUpdateDataBin *icd1__GetUpdateDataBin, _icd1__GetUpdateDataBinResponse *icd1__GetUpdateDataBinResponse) { return GetUpdateDataBin(NULL, NULL, icd1__GetUpdateDataBin, icd1__GetUpdateDataBinResponse); }
	virtual	int GetUpdateDataBin(const char *endpoint, const char *soap_action, _icd1__GetUpdateDataBin *icd1__GetUpdateDataBin, _icd1__GetUpdateDataBinResponse *icd1__GetUpdateDataBinResponse);

	/// Web service operation 'HasUpdateBin' (returns error code or SOAP_OK)
	virtual	int HasUpdateBin(_icd1__HasUpdateBin *icd1__HasUpdateBin, _icd1__HasUpdateBinResponse *icd1__HasUpdateBinResponse) { return HasUpdateBin(NULL, NULL, icd1__HasUpdateBin, icd1__HasUpdateBinResponse); }
	virtual	int HasUpdateBin(const char *endpoint, const char *soap_action, _icd1__HasUpdateBin *icd1__HasUpdateBin, _icd1__HasUpdateBinResponse *icd1__HasUpdateBinResponse);

	/// Web service operation 'SendData' (returns error code or SOAP_OK)
	virtual	int SendData(_icd1__SendData *icd1__SendData, _icd1__SendDataResponse *icd1__SendDataResponse) { return SendData(NULL, NULL, icd1__SendData, icd1__SendDataResponse); }
	virtual	int SendData(const char *endpoint, const char *soap_action, _icd1__SendData *icd1__SendData, _icd1__SendDataResponse *icd1__SendDataResponse);
};
#endif
